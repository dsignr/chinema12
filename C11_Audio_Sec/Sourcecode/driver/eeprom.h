#ifndef _EEPROM_H
#define _EEPROM_H

#define EEPROM_SIZE 	1024

#define EVER_USED 		0x54

#define INPUT_NAME_LENGTH 		12
#define PRODUCT_NAME_LENGTH 	20

#define EQ_POSITION_LENGTH 	10
#define SPK_NUM 				8

#define FM_PRESET_NUM 			100
#define HDFM_PRESET_NUM		100
#define AM_PRESET_NUM 			100
#define HDAM_PRESET_NUM		100

enum{
PRODUCT_ID_POSITION = 0,	//0
AUTO_SEEK_POSITION,
ZONE2_VOLUME_POSITION,
AD_INPUT_POSITION,
DIMER_POSITION,
AUTO_DETECT_POSITION,		//5
ZONE2_OUT_POSITION,
IR_CONTROL_POSITION,
CROSS_FL_POSITION,
CROSS_CEN_POSITION,
CROSS_FR_POSITION,		//10
CROSS_SL_POSITION,
CROSS_SR_POSITION,
CROSS_SBL_POSITION,
CROSS_SBR_POSITION,
CROSS_SW_POSITION,		//15
DISTANCE_FL_POSITION,
DISTANCE_FR_POSITION,
DISTANCE_CEN_POSITION,
DISTANCE_SL_POSITION,
DISTANCE_SR_POSITION,		//20
DISTANCE_SBL_POSITION,
DISTANCE_SBR_POSITION,
DISTANCE_SW_POSITION,
AV_SYNC_POSITION,
BALANCE_FL_POSITION,		//25
BALANCE_CEN_POSITION,
BALANCE_FR_POSITION,
BALANCE_SL_POSITION,
BALANCE_SR_POSITION,
BALANCE_SW_POSITION,		//30
BLANCE_SBL_POSITION,
BLANCE_SBR_POSITION,
LATE_POSITION, 
ZONE1_OUT_POSITION,
INPUT1_NAME_POSITION,		//35 Input name need 12 bytes
INPUT2_NAME_POSITION = INPUT1_NAME_POSITION + INPUT_NAME_LENGTH,	//35+12=47
INPUT3_NAME_POSITION = INPUT2_NAME_POSITION + INPUT_NAME_LENGTH, //47+12=59
INPUT4_NAME_POSITION = INPUT3_NAME_POSITION + INPUT_NAME_LENGTH, //59+12=71
INPUT5_NAME_POSITION = INPUT4_NAME_POSITION + INPUT_NAME_LENGTH, //71+12=83
INPUT6_NAME_POSITION = INPUT5_NAME_POSITION + INPUT_NAME_LENGTH, //83+12=95
INPUT7_NAME_POSITION = INPUT6_NAME_POSITION + INPUT_NAME_LENGTH, //95+12=107
INPUT8_NAME_POSITION = INPUT7_NAME_POSITION + INPUT_NAME_LENGTH, //107+12=119
INPUT7CH1_NAME_POSITION = INPUT8_NAME_POSITION + INPUT_NAME_LENGTH, //119+12=131
INPUTHDMI1_NAME_POSITION=INPUT7CH1_NAME_POSITION+INPUT_NAME_LENGTH, //131+12=143
INPUTHDMI2_NAME_POSITION=INPUTHDMI1_NAME_POSITION+INPUT_NAME_LENGTH, //143+12=155
INPUTHDMI3_NAME_POSITION=INPUTHDMI2_NAME_POSITION+INPUT_NAME_LENGTH, //131+12=143
INPUTHDMI4_NAME_POSITION=INPUTHDMI3_NAME_POSITION+INPUT_NAME_LENGTH, //143+12=155
INPUTARC_NAME_POSITION=INPUTHDMI4_NAME_POSITION+INPUT_NAME_LENGTH, //143+12=155
PRODUCT_NAME_POSITION = INPUTARC_NAME_POSITION + INPUT_NAME_LENGTH, //155+12=167
EUROPE_FM_P00 = PRODUCT_NAME_POSITION + PRODUCT_NAME_LENGTH, //167+20=187
HDFM_P00=EUROPE_FM_P00+FM_PRESET_NUM, 						  //187+100=287
AM_10K_P00 = HDFM_P00 + HDFM_PRESET_NUM, 						  //287+100=387
HDAM_P00=AM_10K_P00+AM_PRESET_NUM, 							  //387+100=487
PASSWORD_MODE_POSITION = HDAM_P00 + HDAM_PRESET_NUM, 		  //487+100=587
PASSWORD_L,
PASSWORD_H,
SPK_MODE_POSITION, //590 8个speaker mode
FM_MODE_POSITION = SPK_MODE_POSITION + SPK_NUM, //590+8=598
AM_MODE_POSITION,
ANALOG1_LEVEL_POSITION, //600
ANALOG2_LEVEL_POSITION, 
ANALOG3_LEVEL_POSITION,
ANALOG4_LEVEL_POSITION,
ANALOG5_LEVEL_POSITION,
ANALOG6_LEVEL_POSITION, //605
ANALOG7_LEVEL_POSITION, 
ANALOG8_LEVEL_POSITION,
ANALOG1_MODE_POSITION,
ANALOG2_MODE_POSITION,
ANALOG3_MODE_POSITION, //610
ANALOG4_MODE_POSITION, 
ANALOG5_MODE_POSITION,
ANALOG6_MODE_POSITION,
ANALOG7_MODE_POSITION,
ANALOG8_MODE_POSITION, //615
ANALOG7CH1_MODE_POSITION, 
ANALOG_TUNER_MODE_POSITION,
BALANCE_TEST_MODE_POSITION,
SPK_PHASE_POSITION, //619 8个speaker phase
TRIGGER_POSITION=SPK_PHASE_POSITION+8, //619+8 = 627
TRIGGER_POSITION1, //619+8 = 627
TRIGGER_POSITION2, //619+8 = 627
EQ_FL_POSITION, //628	/*EQ后面必须空出8*10=80个位置*/
ZONE2_IR_MODE_POSITION = EQ_FL_POSITION + 80, // 628+80=708
REAR_IR_MODE_POSITION,
ZONE2_IR_CONTROL_POSITION, //710
SPK_MODE_POSITION_MUSIC, //711
DISTANCE_FL_POSITION_MUSIC=SPK_MODE_POSITION_MUSIC+ SPK_NUM, //711+8=719
DISTANCE_FR_POSITION_MUSIC, //720
DISTANCE_CEN_POSITION_MUSIC,
DISTANCE_SL_POSITION_MUSIC, 
DISTANCE_SR_POSITION_MUSIC,		
DISTANCE_SBL_POSITION_MUSIC,
DISTANCE_SBR_POSITION_MUSIC, //725
DISTANCE_SW_POSITION_MUSIC, 
BALANCE_TEST_MODE_POSITION_MUSIC, 
BALANCE_FL_POSITION_MUSIC,   
BALANCE_CEN_POSITION_MUSIC, 
BALANCE_FR_POSITION_MUSIC, //730   
BALANCE_SL_POSITION_MUSIC,
BALANCE_SR_POSITION_MUSIC, 
BALANCE_SW_POSITION_MUSIC,		
BLANCE_SBL_POSITION_MUSIC,   
BLANCE_SBR_POSITION_MUSIC, //735
CROSS_FL_POSITION_MUSIC,     
CROSS_CEN_POSITION_MUSIC,  
CROSS_FR_POSITION_MUSIC,	   	
CROSS_SL_POSITION_MUSIC,
CROSS_SR_POSITION_MUSIC, //740
CROSS_SBL_POSITION_MUSIC,
CROSS_SBR_POSITION_MUSIC,  
CROSS_SW_POSITION_MUSIC,		
EQ_FL_POSITION_MUSIC,  //744 /*EQ后面必须空出8*10=80个位置*/
SPK_PHASE_POSITION_MUSIC=EQ_FL_POSITION_MUSIC+80, // 744+80=824 8 个speaker phase
SPK_PANORAMA_DIMENSION_MUSIC=SPK_PHASE_POSITION_MUSIC+8, //824+8=832   
SPK_PANORAMA_PANORAMA_MUSIC, //833
SPK_PANORAMA_WIDTH_MUSIC, //834
ASSIGNED_INPUT1, //835
ASSIGNED_INPUT2, 
ASSIGNED_INPUT3,
ASSIGNED_INPUT4,  
ASSIGNED_INPUT5,
ASSIGNED_INPUT6, //840
ASSIGNED_INPUT7,
ASSIGNED_INPUT8, 
SPK_PANORAMA_DELAY_MUSIC, 
ZONE1_VOLUME_POSITION, //844
AM_VOLUME_POSITION=ZONE1_VOLUME_POSITION+15, // 844+12=856 (Input1--Input8/Input 7.1/Input_tuner/HDMI1/HDMI2)
FM_VOLUME_POSITION,      //FM 电台音量
HDAM_VOLUME_POSITION, //HDAM 电台音量
HDFM_VOLUME_POSITION, //HDFM 电台音量
HDMI1_IN_AUDIO, //HDMI1 Input Select (Spdif LPCM) //854
HDMI2_IN_AUDIO, //HDMI2 Input Select (Spdif LPCM) //855
HDMI3_IN_AUDIO, //HDMI1 Input Select (Spdif LPCM) //854
HDMI4_IN_AUDIO, //HDMI2 Input Select (Spdif LPCM) //855
HDMI_AUDIO_OUT,
Master_Volume_Level,
Z2_Master_Volume_Level,
CD_PURE_AUDIO,
Set_Max_Volume_Level,
};

extern void EepromWriteByte(unsigned int addr,unsigned char value);
extern unsigned char EepromReadByte(unsigned int addr);
extern void DebugEepromValue(void);
extern void FillEepromValue(unsigned char value);    
#endif

