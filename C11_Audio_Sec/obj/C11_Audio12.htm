<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\C11_Audio12.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\C11_Audio12.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Thu Dec 12 15:50:53 2013
<BR><P>
<H3>Maximum Stack Usage =        952 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ASProcSetBalance &rArr; GetIrc2EqValue &rArr; DspReadIrc1 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[34]">Reset_Handler</a>
 <LI><a href="#[418]">__user_initial_stackheap</a>
 <LI><a href="#[35]">Undef_Handler</a>
 <LI><a href="#[36]">SWI_Handler</a>
 <LI><a href="#[37]">PAbt_Handler</a>
 <LI><a href="#[38]">DAbt_Handler</a>
 <LI><a href="#[39]">IRQ_Handler</a>
 <LI><a href="#[3a]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3f0]">DSP_CFG_MCLK_FACTOR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[3ee]">DSP_CFG_AUDIO_SRC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[3bf]">Change_Input_Audio_Source</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c4]">DSP_CFG_VIRTUALIZER</a><BR>
 <LI><a href="#[3bc]">DSP_CFG_PPM_Mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[3bb]">DSP_CFG_PPM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[3c3]">DSP_CFG_MATRIX</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[3c8]">DSP_CFG_DECODER</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[3ba]">DSP_BOOT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">DspSpiWriteNByte</a><BR>
 <LI><a href="#[35]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">Undef_Handler</a><BR>
 <LI><a href="#[36]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">SWI_Handler</a><BR>
 <LI><a href="#[37]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">PAbt_Handler</a><BR>
 <LI><a href="#[38]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">DAbt_Handler</a><BR>
 <LI><a href="#[39]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">IRQ_Handler</a><BR>
 <LI><a href="#[3a]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ASProcSetBalance</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[32]">ASProcSetCrossoverPoints</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[2f]">ASProcSetDistance</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[31]">ASProcSetRoomEQ</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[33]">ASProcSetSpeakerphase</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[2d]">ASProcSetupConfig</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[2e]">ASProcSpeakerCheck</a> from auto_sound.o(.text) referenced 2 times from auto_sound.o(.data)
 <LI><a href="#[14]">AnalogInSetup</a> from setup_func.o(.text) referenced 20 times from menu_tbl.o(.data)
 <LI><a href="#[13]">AnalogLevelSetup</a> from setup_func.o(.text) referenced 16 times from menu_tbl.o(.data)
 <LI><a href="#[11]">AssignedInputSetup</a> from setup_func.o(.text) referenced 16 times from menu_tbl.o(.data)
 <LI><a href="#[25]">AutoInputSeekSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[10c]">AutoSoundProcMessage</a> from auto_sound.o(.text) referenced from task.o(.constdata)
 <LI><a href="#[1c]">AvSyncDelaySetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[1d]">BrightSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[4]">C11Rs232</a> from rs232_protocol.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[1a]">CDPureAudio</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[38]">DAbt_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[3a]">FIQ_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[1b]">HDMIAUIDOOUT</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[15]">HDMIInAudioSetup</a> from setup_func.o(.text) referenced 8 times from menu_tbl.o(.data)
 <LI><a href="#[39]">IRQ_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[12]">InputNameSetup</a> from setup_func.o(.text) referenced 28 times from menu_tbl.o(.data)
 <LI><a href="#[1e]">IrControlSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[26]">LateSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[2b]">LogoSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[18]">MasterVolumeLevel</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[37]">PAbt_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[29]">PasswordModeSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[2a]">PasswordSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[da]">ProCmdZ1VFD_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[75]">ProCmdZ2VFD_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[101]">ProcCmdASAIS</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f7]">ProcCmdASAVD</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[102]">ProcCmdASDD</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f8]">ProcCmdASFP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f6]">ProcCmdASHDMIAO</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[fb]">ProcCmdASIR2C</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[fd]">ProcCmdASIR2M</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[fa]">ProcCmdASIRC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[fc]">ProcCmdASIRM</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[105]">ProcCmdASMVO</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[104]">ProcCmdASPAO</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[103]">ProcCmdASRD</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f9]">ProcCmdASRSN</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f5]">ProcCmdASSP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[fe]">ProcCmdASTO1</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ff]">ProcCmdASTO2</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[100]">ProcCmdASTO3</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[106]">ProcCmdAZ1SMV</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[107]">ProcCmdAZ2SMV</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b4]">ProcCmdMSLBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b3]">ProcCmdMSLBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[af]">ProcCmdMSLC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ae]">ProcCmdMSLL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b0]">ProcCmdMSLR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b2]">ProcCmdMSLSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b1]">ProcCmdMSLSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b5]">ProcCmdMSLSW</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ac]">ProcCmdMSPBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ab]">ProcCmdMSPBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a7]">ProcCmdMSPC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a6]">ProcCmdMSPL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a8]">ProcCmdMSPR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[aa]">ProcCmdMSPSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a9]">ProcCmdMSPSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ad]">ProcCmdMSPs</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c7]">ProcCmdMSSPC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c6]">ProcCmdMSSPL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c8]">ProcCmdMSSPR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[cc]">ProcCmdMSSPSBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[cb]">ProcCmdMSSPSBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ca]">ProcCmdMSSPSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c9]">ProcCmdMSSPSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[cd]">ProcCmdMSSPSW</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a4]">ProcCmdMSZC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[9e]">ProcCmdMSZL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[9f]">ProcCmdMSZR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a5]">ProcCmdMSZS</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a2]">ProcCmdMSZSBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a3]">ProcCmdMSZSBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a0]">ProcCmdMSZSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[a1]">ProcCmdMSZSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[bd]">ProcCmdMSZX</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b7]">ProcCmdMSZXFC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b6]">ProcCmdMSZXFL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b8]">ProcCmdMSZXFR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[bb]">ProcCmdMSZXSBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ba]">ProcCmdMSZXSBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[bc]">ProcCmdMSZXSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[b9]">ProcCmdMSZXSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c3]">ProcCmdMZ1EQBSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c2]">ProcCmdMZ1EQBSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[bf]">ProcCmdMZ1EQC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[be]">ProcCmdMZ1EQL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c0]">ProcCmdMZ1EQR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c4]">ProcCmdMZ1EQSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c1]">ProcCmdMZ1EQSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[c5]">ProcCmdMZ1EQSW</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[47]">ProcCmdRSN</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[7c]">ProcCmdSLBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[7b]">ProcCmdSLBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[77]">ProcCmdSLC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[76]">ProcCmdSLL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[78]">ProcCmdSLR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[7a]">ProcCmdSLSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[79]">ProcCmdSLSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[7d]">ProcCmdSLSW</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[84]">ProcCmdSPBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[83]">ProcCmdSPBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[7f]">ProcCmdSPC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[7e]">ProcCmdSPL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[80]">ProcCmdSPR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[82]">ProcCmdSPSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[81]">ProcCmdSPSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[46]">ProcCmdSPU</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[85]">ProcCmdSPs</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[97]">ProcCmdSSPC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[96]">ProcCmdSSPL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[98]">ProcCmdSSPR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[9c]">ProcCmdSSPSBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[9b]">ProcCmdSSPSBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[9a]">ProcCmdSSPSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[99]">ProcCmdSSPSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[9d]">ProcCmdSSPSW</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[8c]">ProcCmdSZC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[86]">ProcCmdSZL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[87]">ProcCmdSZR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[8d]">ProcCmdSZS</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[8a]">ProcCmdSZSBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[8b]">ProcCmdSZSBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[88]">ProcCmdSZSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[89]">ProcCmdSZSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[95]">ProcCmdSZX</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[8f]">ProcCmdSZXFC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[8e]">ProcCmdSZXFL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[90]">ProcCmdSZXFR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[94]">ProcCmdSZXSBL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[93]">ProcCmdSZXSBR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[92]">ProcCmdSZXSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[91]">ProcCmdSZXSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[50]">ProcCmdT</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[53]">ProcCmdTAF</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[54]">ProcCmdTAHDF</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[4d]">ProcCmdTAHDP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[52]">ProcCmdTAHDS</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[49]">ProcCmdTAHDT</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[4c]">ProcCmdTAP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[51]">ProcCmdTAS</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[48]">ProcCmdTAT</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[4f]">ProcCmdTFHDP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[4b]">ProcCmdTFHDT</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[4e]">ProcCmdTFP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[4a]">ProcCmdTFT</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[55]">ProcCmdTT_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[eb]">ProcCmdZ1ACN1</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ec]">ProcCmdZ1ACN2</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ed]">ProcCmdZ1ACN3</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ee]">ProcCmdZ1ACN4</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ef]">ProcCmdZ1ACN5</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f0]">ProcCmdZ1ACN6</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f1]">ProcCmdZ1ACN7</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f3]">ProcCmdZ1ACN7_1</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f2]">ProcCmdZ1ACN8</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[f4]">ProcCmdZ1ACNR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[63]">ProcCmdZ1A_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[62]">ProcCmdZ1C</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[61]">ProcCmdZ1D</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[66]">ProcCmdZ1DF_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[5a]">ProcCmdZ1E</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[60]">ProcCmdZ1ED</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[5d]">ProcCmdZ1EE</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[5c]">ProcCmdZ1EF</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d0]">ProcCmdZ1EMC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d1]">ProcCmdZ1EMDEL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ce]">ProcCmdZ1EMDIM</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[cf]">ProcCmdZ1EMP</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[6f]">ProcCmdZ1EQ</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[6c]">ProcCmdZ1EQBSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[6b]">ProcCmdZ1EQBSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[68]">ProcCmdZ1EQC</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[67]">ProcCmdZ1EQL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[69]">ProcCmdZ1EQR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[6d]">ProcCmdZ1EQSL</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[6a]">ProcCmdZ1EQSR</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[6e]">ProcCmdZ1EQSW</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[5e]">ProcCmdZ1ES</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[5f]">ProcCmdZ1EU</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[5b]">ProcCmdZ1EX</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[db]">ProcCmdZ1IN1</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[dc]">ProcCmdZ1IN2</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[dd]">ProcCmdZ1IN3</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[de]">ProcCmdZ1IN4</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[df]">ProcCmdZ1IN5</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e0]">ProcCmdZ1IN6</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e1]">ProcCmdZ1IN7</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e2]">ProcCmdZ1IN8</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[56]">ProcCmdZ1LPS</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[59]">ProcCmdZ1M</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[58]">ProcCmdZ1P</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[57]">ProcCmdZ1S</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e3]">ProcCmdZ1SAL1</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e4]">ProcCmdZ1SAL2</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e5]">ProcCmdZ1SAL3</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e6]">ProcCmdZ1SAL4</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e7]">ProcCmdZ1SAL5</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e8]">ProcCmdZ1SAL6</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[e9]">ProcCmdZ1SAL7</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[ea]">ProcCmdZ1SAL8</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d7]">ProcCmdZ1VBL_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d8]">ProcCmdZ1VBR_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d4]">ProcCmdZ1VC_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d2]">ProcCmdZ1VFL_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d3]">ProcCmdZ1VFR_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[65]">ProcCmdZ1VM</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d5]">ProcCmdZ1VSL_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d6]">ProcCmdZ1VSR_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[d9]">ProcCmdZ1VS_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[64]">ProcCmdZ1_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[73]">ProcCmdZ2M</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[70]">ProcCmdZ2P</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[71]">ProcCmdZ2S</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[72]">ProcCmdZ2V</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[74]">ProcCmdZ2_</a> from rs232_protocol.o(.text) referenced from rs232_protocol.o(.constdata)
 <LI><a href="#[10a]">RadioProcMessage</a> from radio_task.o(.text) referenced from task.o(.constdata)
 <LI><a href="#[20]">RearIrModeSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[34]">Reset_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[28]">RestoreDefaultSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[36]">SWI_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[27]">SetMaxVolumeLevel</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[2c]">SetupExitMenu</a> from setup_menu.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[5]">SetupMenuDisplay</a> from setup_menu.o(.text) referenced 102 times from menu_tbl.o(.data)
 <LI><a href="#[109]">SetupProcMessage</a> from setup_menu.o(.text) referenced from task.o(.constdata)
 <LI><a href="#[9]">SpkBlanceSetup</a> from setup_func.o(.text) referenced 32 times from menu_tbl.o(.data)
 <LI><a href="#[9]">SpkBlanceSetup</a> from setup_func.o(.text) referenced from setup_menu.o(.text)
 <LI><a href="#[8]">SpkBlanceTestMode</a> from setup_func.o(.text) referenced 4 times from menu_tbl.o(.data)
 <LI><a href="#[6]">SpkConfigSetup</a> from setup_func.o(.text) referenced 32 times from menu_tbl.o(.data)
 <LI><a href="#[a]">SpkCrossoverSetup</a> from setup_func.o(.text) referenced 32 times from menu_tbl.o(.data)
 <LI><a href="#[10]">SpkDelaySetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[d]">SpkDimensionSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[7]">SpkDistanceSetup</a> from setup_func.o(.text) referenced 32 times from menu_tbl.o(.data)
 <LI><a href="#[b]">SpkEqSetup</a> from setup_func.o(.text) referenced 320 times from menu_tbl.o(.data)
 <LI><a href="#[e]">SpkPanoramaSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[c]">SpkPhaseSetup</a> from setup_func.o(.text) referenced 32 times from menu_tbl.o(.data)
 <LI><a href="#[f]">SpkWidthSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[22]">TriggerSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[23]">TriggerSetup1</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[24]">TriggerSetup2</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[3d]">Uart0Isr</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[3e]">Uart1Isr</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[35]">Undef_Handler</a> from lpc2300.o(RESET) referenced from lpc2300.o(RESET)
 <LI><a href="#[19]">Z2MasterVolumeLevel</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[108]">Zone1ProcMessage</a> from zone1_task.o(.text) referenced from task.o(.constdata)
 <LI><a href="#[16]">Zone2InputSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[1f]">Zone2IrControlSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[21]">Zone2IrModeSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[10b]">Zone2ProcMessage</a> from zone2_task.o(.text) referenced from task.o(.constdata)
 <LI><a href="#[17]">Zone2VolumeSetup</a> from setup_func.o(.text) referenced 2 times from menu_tbl.o(.data)
 <LI><a href="#[11d]">__main</a> from __main.o(!!!main) referenced from lpc2300.o(RESET)
 <LI><a href="#[45]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[44]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[43]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[40]">exint1</a> from ioport.o(.text) referenced from ioport.o(.text)
 <LI><a href="#[41]">exint2</a> from ioport.o(.text) referenced from ioport.o(.text)
 <LI><a href="#[3f]">exint3</a> from ioport.o(.text) referenced from ioport.o(.text)
 <LI><a href="#[3c]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[113]">sense_scl1</a> from ioport.o(.text) referenced from eeprom.o(.constdata)
 <LI><a href="#[117]">sense_scl2</a> from ioport.o(.text) referenced from channel.o(.constdata)
 <LI><a href="#[11b]">sense_scl_hdmi</a> from ioport.o(.text) referenced from hdmi.o(.constdata)
 <LI><a href="#[114]">sense_sda1</a> from ioport.o(.text) referenced from eeprom.o(.constdata)
 <LI><a href="#[118]">sense_sda2</a> from ioport.o(.text) referenced from channel.o(.constdata)
 <LI><a href="#[11c]">sense_sda_hdmi</a> from ioport.o(.text) referenced from hdmi.o(.constdata)
 <LI><a href="#[10f]">sense_vfd_scl</a> from ioport.o(.text) referenced 2 times from cs8416.o(.constdata)
 <LI><a href="#[110]">sense_vfd_sda</a> from ioport.o(.text) referenced 2 times from cs8416.o(.constdata)
 <LI><a href="#[111]">set_scl1</a> from ioport.o(.text) referenced from eeprom.o(.constdata)
 <LI><a href="#[115]">set_scl2</a> from ioport.o(.text) referenced from channel.o(.constdata)
 <LI><a href="#[119]">set_scl_hdmi</a> from ioport.o(.text) referenced from hdmi.o(.constdata)
 <LI><a href="#[112]">set_sda1</a> from ioport.o(.text) referenced from eeprom.o(.constdata)
 <LI><a href="#[116]">set_sda2</a> from ioport.o(.text) referenced from channel.o(.constdata)
 <LI><a href="#[11a]">set_sda_hdmi</a> from ioport.o(.text) referenced from hdmi.o(.constdata)
 <LI><a href="#[10d]">set_vfd_scl</a> from ioport.o(.text) referenced 2 times from cs8416.o(.constdata)
 <LI><a href="#[10e]">set_vfd_sda</a> from ioport.o(.text) referenced 2 times from cs8416.o(.constdata)
 <LI><a href="#[42]">timer0_irq</a> from timer.o(.text) referenced from timer.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11e]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[120]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[451]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[452]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[453]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[454]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[121]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[3fc]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[123]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[127]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[128]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[129]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[455]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[12b]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[12d]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[12f]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[131]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[133]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[136]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[139]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[456]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[13b]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[13d]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[13f]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[141]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[457]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[14b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[458]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[459]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>

<P><STRONG><a name="[45a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[45b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[45c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
</UL>

<P><STRONG><a name="[45d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[45e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[146]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
</UL>

<P><STRONG><a name="[45f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[460]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[461]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[462]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[463]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[464]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[465]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[466]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[467]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[468]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[469]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[46a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[46b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[46c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[46d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[46e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[46f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[470]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[471]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[11f]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[472]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[148]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14a]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[473]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[14c]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[474]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[41a]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[14e]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[475]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[150]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[418]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2300.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[152]"></a>Systeminit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Systeminit &rArr; HardwareInit &rArr; SetTrigerOut2 &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRemoteRepeatKey
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRemoteRepeatKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>ProcDimerOff</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ProcDimerOff &rArr; VfdSetDimerValue &rArr; VfdSendByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetDimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupProcMessage
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = main &rArr; Timer0_Handler &rArr; RadioDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetDimerValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdRefresh
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioLoop
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMessage
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemStartupValue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStandby
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMsgQueue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systeminit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[168]"></a>debug_printf</STRONG> (Thumb, 66 bytes, Stack size 160 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuDisplay
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExitMenu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcPower
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemStartupValue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCurrenTunerFreq
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextDispBuffer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Write_Freq_Command
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCs8416
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Port_Select
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHidenKey
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcSurKey
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdShowMenuOption
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuHeaderShow
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCaptionShow
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Volume
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanegName
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqOn
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialRead
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendByte
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendNByte
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mas9116_HardMute
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugEepromValue
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416WriteByte
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadEq
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_MATRIX_Code
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsHD_Cfg_Change_Deal
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTS_Cfg_Change_Deal
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TureHD_Cfg_Change_Deal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC3_Cfg_Change_Deal
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDspMessage
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcUnsolicitedMsg
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseTureHDCfg
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHRACfg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHDCfg
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseAc3Cfg
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBuffer
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBuffer
</UL>

<P><STRONG><a name="[15b]"></a>assert_Function</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetupConfig
</UL>

<P><STRONG><a name="[16c]"></a>rs232_printf</STRONG> (Thumb, 66 bytes, Stack size 160 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSL
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZR
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZL
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBL
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSW
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLL
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdRSN
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProCmdZ2VFD_
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2M
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2V
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2P
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQ
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSW
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQC
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQL
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1DF_
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VM
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EU
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EX
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ES
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ED
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1D
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1C
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1A_
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1M
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1P
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1_
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11Rs232
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcRs232Msg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ2SMV
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASPAO
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRD
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASDD
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAIS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASTO3
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASTO2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASTO1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIR2M
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIRM
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIR2C
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIRC
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRSN
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASFP
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAVD
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASHDMIAO
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASSP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTT_
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTunerPosition
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdT
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDP
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAP
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACNR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN7_1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN7
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN8
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN7
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN6
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN5
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN3
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN2
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProCmdZ1VFD_
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232UpdateStreamType
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VS_
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VBR_
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VBL_
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VSR_
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VSL_
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VC_
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VFR_
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VFL_
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDEL
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDIM
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSW
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSBL
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSBR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSL
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSR
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSW
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSL
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSL
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQL
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLL
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBL
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPL
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSBR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSBL
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSR
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSL
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZL
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSW
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSBL
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSBR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPC
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPL
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1LPS
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSBR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSBL
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSR
</UL>

<P><STRONG><a name="[476]"></a>debug_message</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>InitQueue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[16d]"></a>IsQueueEmpty</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsQueueEmpty &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueElementNum
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11Rs232
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialRead
</UL>

<P><STRONG><a name="[16f]"></a>IsQueueFull</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsQueueFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueElementNum
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InQueue
</UL>

<P><STRONG><a name="[477]"></a>QueueFront</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>DeQueue</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DeQueue &rArr; IsQueueEmpty &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueEmpty
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11Rs232
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialRead
</UL>

<P><STRONG><a name="[171]"></a>InQueue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InQueue &rArr; IsQueueFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueFull
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Isr (via Veneer)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Isr (via Veneer)
</UL>

<P><STRONG><a name="[172]"></a>GetQueueElementNum</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueFull
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueElementRemain
</UL>

<P><STRONG><a name="[173]"></a>GetQueueElementRemain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueElementNum
</UL>

<P><STRONG><a name="[174]"></a>GetQueueElement</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>

<P><STRONG><a name="[175]"></a>SetDspPower</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, c11_msg_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[177]"></a>SetDspDelay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, c11_msg_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkDistance
</UL>

<P><STRONG><a name="[179]"></a>SetDspCorner</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, c11_msg_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcCorner
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
</UL>

<P><STRONG><a name="[17b]"></a>SetDspSpkMode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, c11_msg_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcSpkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSL
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZR
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZL
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSBR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSBL
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSR
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSL
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSBR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSBL
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSR
</UL>

<P><STRONG><a name="[17d]"></a>SetDspSignal</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, c11_msg_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SetDspSignal &rArr; DspProcSignal &rArr; DSP_SGEN_ENABLE &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceTestSignal
</UL>

<P><STRONG><a name="[17f]"></a>SetDspIrc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, c11_msg_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = SetDspIrc &rArr; DspProcIrc &rArr; InitMicParameter &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[181]"></a>HeadphoneDetect</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = HeadphoneDetect &rArr; MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[186]"></a>GetEncoderSwitchThread</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetEncoderSwitchThread
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseEncoderSwitchPlus
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseEncoderSwitchMinus
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[18c]"></a>key_task</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = key_task &rArr; GetPanelKeyThread &rArr; read_key &rArr; HeadphoneDetect &rArr; MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetKey
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelKeyThread
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[15a]"></a>InitMsgQueue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, message.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>PostMessage</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, message.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsgQueueFull
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>SendMessage</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsgQueueFull
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetKey
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSavePreset
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTextDisplay
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetSoftMute
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDspChannel
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPHDMISetting
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioFreq
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDimer
</UL>

<P><STRONG><a name="[162]"></a>GetMessage</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetMessage &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsgQueueEmpty
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>GetProtocolFloatValue</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = GetProtocolFloatValue &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBL
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPL
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSW
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLL
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2V
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSW
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQC
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQL
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VM
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ2SMV
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAVD
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDP
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAP
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSW
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSL
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSL
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQL
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLL
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBL
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPL
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL
</UL>

<P><STRONG><a name="[1c4]"></a>IsProtocolStringValid</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdRSN
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRSN
</UL>

<P><STRONG><a name="[46]"></a>ProcCmdSPU</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>GetCurrentDecodeStatus</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1_
</UL>

<P><STRONG><a name="[198]"></a>GetPcmDecodeMode</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetPcmDecodeMode
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EU
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1_
</UL>

<P><STRONG><a name="[64]"></a>ProcCmdZ1_</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1_ &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcmDecodeMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentDecodeStatus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>GetZone1Channel</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetZone1Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S
</UL>

<P><STRONG><a name="[57]"></a>ProcCmdZ1S</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1S &rArr; RadioInit &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZone1Channel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>ProcCmdZ1P</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1P &rArr; MsgSetPower &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone1PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ProcCmdZ1M</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1M &rArr; MsgSetMute &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>ProcCmdZ1A_</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1A_ &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>ProcCmdZ1C</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1C &rArr; SetLate &rArr; DSP_AC3_BOOST_Y &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ProcCmdZ1D</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1D &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>ProcCmdZ1ED</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ED &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>GetDolby2ChDecodeMode</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF
</UL>

<P><STRONG><a name="[5c]"></a>ProcCmdZ1EF</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EF &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDolby2ChDecodeMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>ProcCmdZ1EE</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EE &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>ProcCmdZ1ES</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ES &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>GetDolby5ChDecodeMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EX
</UL>

<P><STRONG><a name="[5b]"></a>ProcCmdZ1EX</STRONG> (Thumb, 404 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EX &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDolby5ChDecodeMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ProcCmdZ1E</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1E &rArr; DspDecodePcm &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcmDecodeMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>ProcCmdZ1EU</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EU &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcmDecodeMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>ProcCmdZ1VM</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VM &rArr; MsgSetVolume &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone1VolumeValid
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>ProcCmdZ1DF_</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1DF_ &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>ProtocolSetEq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSW
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQC
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSW
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSL
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSL
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQL
</UL>

<P><STRONG><a name="[1b3]"></a>IsProtocolEqBandValid</STRONG> (Thumb, 234 bytes, Stack size 4 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsProtocolEqBandValid
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSW
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQC
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSW
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSL
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSL
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQL
</UL>

<P><STRONG><a name="[1b4]"></a>IsBalanceValid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsBalanceValid &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSW
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLL
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSW
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQBSR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQSR
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQC
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSW
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSL
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSL
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQBSR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQSR
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMZ1EQL
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLL
</UL>

<P><STRONG><a name="[67]"></a>ProcCmdZ1EQL</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQL &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>ProcCmdZ1EQC</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQC &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>ProcCmdZ1EQR</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQR &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>ProcCmdZ1EQSR</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQSR &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>ProcCmdZ1EQBSR</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQBSR &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ProcCmdZ1EQBSL</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQBSL &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>ProcCmdZ1EQSL</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQSL &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>ProcCmdZ1EQSW</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQSW &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>ProcCmdZ1EQ</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EQ &rArr; VfdTempDisp &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>ProcCmdZ2P</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ2P &rArr; MsgSetPower &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone2PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>GetZone2Channel</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetZone2Channel
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
</UL>

<P><STRONG><a name="[71]"></a>ProcCmdZ2S</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ2S &rArr; Zone2RadioMode &rArr; VfdTempDisp &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZone2Channel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2AnalogInOff
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ProcCmdZ2V</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ2V &rArr; MsgSetVolume &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone1VolumeValid
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>ProcCmdZ2M</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ2M &rArr; MsgSetMute &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>ProcCmdZ2_</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ2_ &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>ProCmdZ2VFD_</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProCmdZ2VFD_ &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>ProcCmdRSN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdRSN &rArr; WriteName &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolStringValid
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteName
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>ProcCmdSLL</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ProcCmdSLC</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLC &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>ProcCmdSLR</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ProcCmdSLSR</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLSR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ProcCmdSLSL</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLSL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ProcCmdSLBR</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLBR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ProcCmdSLBL</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLBL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ProcCmdSLSW</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdSLSW &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>IsDistanceValid</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsDistanceValid &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBL
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPL
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAVD
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBL
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPL
</UL>

<P><STRONG><a name="[7e]"></a>ProcCmdSPL</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPL &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ProcCmdSPC</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPC &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ProcCmdSPR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPR &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ProcCmdSPSR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPSR &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ProcCmdSPSL</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPSL &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ProcCmdSPBR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPBR &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ProcCmdSPBL</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPBL &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ProcCmdSPs</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdSPs &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ProcCmdSZL</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZL &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ProcCmdSZR</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZR &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ProcCmdSZSL</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZSL &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ProcCmdSZSR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZSR &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>ProcCmdSZSBL</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZSBL &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ProcCmdSZSBR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZSBR &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ProcCmdSZC</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZC &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ProcCmdSZS</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZS &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>IsCrossoverValid</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsCrossoverValid &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL
</UL>

<P><STRONG><a name="[1cb]"></a>GetCrossoverPoint</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL
</UL>

<P><STRONG><a name="[8e]"></a>ProcCmdSZXFL</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXFL &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ProcCmdSZXFC</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXFC &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ProcCmdSZXFR</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXFR &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>ProcCmdSZXSR</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXSR &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>ProcCmdSZXSL</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXSL &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>ProcCmdSZXSBR</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXSBR &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ProcCmdSZXSBL</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZXSBL &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>ProcCmdSZX</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdSZX &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>ProcCmdZ1LPS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1LPS &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>ProcCmdSSPL</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPL &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>ProcCmdSSPC</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPC &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>ProcCmdSSPR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPR &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>ProcCmdSSPSR</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPSR &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>ProcCmdSSPSL</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPSL &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ProcCmdSSPSBR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPSBR &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>ProcCmdSSPSBL</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPSBL &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ProcCmdSSPSW</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdSSPSW &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>ProcCmdMSZL</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZL &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>ProcCmdMSZR</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZR &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>ProcCmdMSZSL</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZSL &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>ProcCmdMSZSR</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZSR &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ProcCmdMSZSBL</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZSBL &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>ProcCmdMSZSBR</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZSBR &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>ProcCmdMSZC</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZC &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>ProcCmdMSZS</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZS &rArr; SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ProcCmdMSPL</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPL &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>ProcCmdMSPC</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPC &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>ProcCmdMSPR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPR &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>ProcCmdMSPSR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPSR &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>ProcCmdMSPSL</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPSL &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>ProcCmdMSPBR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPBR &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>ProcCmdMSPBL</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPBL &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>ProcCmdMSPs</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSPs &rArr; SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>ProcCmdMSLL</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ProcCmdMSLC</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLC &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ProcCmdMSLR</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>ProcCmdMSLSR</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLSR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>ProcCmdMSLSL</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLSL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ProcCmdMSLBR</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLBR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>ProcCmdMSLBL</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLBL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>ProcCmdMSLSW</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSLSW &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>ProcCmdMSZXFL</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXFL &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>ProcCmdMSZXFC</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXFC &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>ProcCmdMSZXFR</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXFR &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>ProcCmdMSZXSR</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXSR &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>ProcCmdMSZXSBR</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXSBR &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>ProcCmdMSZXSBL</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXSBL &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>ProcCmdMSZXSL</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZXSL &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>ProcCmdMSZX</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSZX &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>ProcCmdMZ1EQL</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQL &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>ProcCmdMZ1EQC</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQC &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>ProcCmdMZ1EQR</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQR &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>ProcCmdMZ1EQSR</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQSR &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>ProcCmdMZ1EQBSR</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQBSR &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>ProcCmdMZ1EQBSL</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQBSL &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>ProcCmdMZ1EQSL</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQSL &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>ProcCmdMZ1EQSW</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdMZ1EQSW &rArr; ProtocolSetEq &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>ProcCmdMSSPL</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPL &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>ProcCmdMSSPC</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPC &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>ProcCmdMSSPR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPR &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>ProcCmdMSSPSR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPSR &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>ProcCmdMSSPSL</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPSL &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>ProcCmdMSSPSBR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPSBR &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ProcCmdMSSPSBL</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPSBL &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>ProcCmdMSSPSW</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdMSSPSW &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>ProcCmdZ1EMDIM</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EMDIM &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Dimension
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>ProcCmdZ1EMP</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EMP &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Panorama_On_Or_Off
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>ProcCmdZ1EMC</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EMC &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Width
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>ProcCmdZ1EMDEL</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1EMDEL &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AV_Delay
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>ProcCmdZ1VFL_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VFL_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>ProcCmdZ1VFR_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VFR_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>ProcCmdZ1VC_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VC_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>ProcCmdZ1VSL_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VSL_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>ProcCmdZ1VSR_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VSR_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>ProcCmdZ1VBL_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VBL_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>ProcCmdZ1VBR_</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VBR_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>ProcCmdZ1VS_</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1VS_ &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>Rs232UpdateStreamType</STRONG> (Thumb, 2246 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Rs232UpdateStreamType &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProCmdZ1VFD_
</UL>

<P><STRONG><a name="[da]"></a>ProCmdZ1VFD_</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ProCmdZ1VFD_ &rArr; Rs232UpdateStreamType &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232UpdateStreamType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>ProcCmdZ1IN1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN1 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>ProcCmdZ1IN2</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN2 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>ProcCmdZ1IN3</STRONG> (Thumb, 704 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN3 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>ProcCmdZ1IN4</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN4 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>ProcCmdZ1IN5</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN5 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>ProcCmdZ1IN6</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN6 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>ProcCmdZ1IN7</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN7 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>ProcCmdZ1IN8</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1IN8 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>IsAnalogLevelValid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsAnalogLevelValid &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL1
</UL>

<P><STRONG><a name="[1d7]"></a>FindLevelPosition</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindLevelPosition &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL1
</UL>

<P><STRONG><a name="[e3]"></a>ProcCmdZ1SAL1</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL1 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>ProcCmdZ1SAL2</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL2 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>ProcCmdZ1SAL3</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL3 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>ProcCmdZ1SAL4</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL4 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>ProcCmdZ1SAL5</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL5 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>ProcCmdZ1SAL6</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL6 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>ProcCmdZ1SAL7</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL7 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>ProcCmdZ1SAL8</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1SAL8 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>ProcCmdZ1ACN1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN1 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>ProcCmdZ1ACN2</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN2 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>ProcCmdZ1ACN3</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN3 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ProcCmdZ1ACN4</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN4 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>ProcCmdZ1ACN5</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN5 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>ProcCmdZ1ACN6</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN6 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>ProcCmdZ1ACN7</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN7 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>ProcCmdZ1ACN8</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN8 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>ProcCmdZ1ACN7_1</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACN7_1 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>ProcCmdZ1ACNR</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdZ1ACNR &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>ProcCmdTAT</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAT &rArr; MsgSetRadioSearch &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioFreq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>ProcCmdTAHDT</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAHDT &rArr; MsgSetRadioSearch &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioFreq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>ProcCmdTFT</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTFT &rArr; MsgSetRadioSearch &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioFreq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>ProcCmdTFHDT</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTFHDT &rArr; MsgSetRadioSearch &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioFreq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>ProcCmdTAP</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAP &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>ProcCmdTAHDP</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAHDP &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>ProcCmdTFP</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTFP &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>ProcCmdTFHDP</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ProcCmdTFHDP &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>ProcCmdT</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ProcCmdT &rArr; MsgSetRadioSearch &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>GetTunerPosition</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GetTunerPosition &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS
</UL>

<P><STRONG><a name="[51]"></a>ProcCmdTAS</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAS &rArr; SaveFmPreset &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTunerPosition
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>ProcCmdTAHDS</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAHDS &rArr; SaveFmPreset &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTunerPosition
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>ProcCmdTAF</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAF &rArr; SaveFmPreset &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTunerPosition
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>ProcCmdTAHDF</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ProcCmdTAHDF &rArr; SaveFmPreset &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTunerPosition
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ProcCmdTT_</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ProcCmdTT_ &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>ProcCmdASSP</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASSP &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>ProcCmdASHDMIAO</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdASHDMIAO &rArr; SetHdmiAudioOut &rArr; HdmiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHdmiAudioOut
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>ProcCmdASAVD</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcCmdASAVD &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AV_Delay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>ProcCmdASFP</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASFP &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDimer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>ProcCmdASRSN</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ProcCmdASRSN &rArr; WriteName &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolStringValid
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteName
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>ProcCmdASIRC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASIRC &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>ProcCmdASIR2C</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASIR2C &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectIr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>ProcCmdASIRM</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASIRM &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>ProcCmdASIR2M</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASIR2M &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ProcCmdASTO1</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASTO1 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>ProcCmdASTO2</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASTO2 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ProcCmdASTO3</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASTO3 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>ProcCmdASAIS</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASAIS &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>ProcCmdASDD</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ProcCmdASDD &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ProcCmdASRD</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdASRD &rArr; SetupLoadDefault &rArr; WritePwd &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>ProcCmdASPAO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcCmdASPAO &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>IsVolumeValid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsVolumeValid &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ2SMV
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
</UL>

<P><STRONG><a name="[1eb]"></a>IsMAXVolumeValid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IsMAXVolumeValid &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO
</UL>

<P><STRONG><a name="[105]"></a>ProcCmdASMVO</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdASMVO &rArr; MaxVolumeLevel &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxVolumeLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMAXVolumeValid
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>GetMasterVolumePoint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetMasterVolumePoint &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ2SMV
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
</UL>

<P><STRONG><a name="[106]"></a>ProcCmdAZ1SMV</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ProcCmdAZ1SMV &rArr; SetMasterVolumeLevel &rArr; SetMasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterVolumePoint
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVolumeValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>ProcCmdAZ2SMV</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ProcCmdAZ2SMV &rArr; SetZ2MasterVolumeLevel &rArr; SetZ2MasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterVolumePoint
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVolumeValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>StrCmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rs232_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcRs232Msg
</UL>

<P><STRONG><a name="[1f0]"></a>ProcRs232Msg</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ProcRs232Msg &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11Rs232
</UL>

<P><STRONG><a name="[4]"></a>C11Rs232</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, rs232_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = C11Rs232 &rArr; ProcRs232Msg &rArr; rs232_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueEmpty
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Send
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcRs232Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>SetSpeakerMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SetSpeakerMode &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>

<P><STRONG><a name="[1f4]"></a>SetDistanceMode</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = SetDistanceMode &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Channel_Setting
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>

<P><STRONG><a name="[1f6]"></a>SetBalanceMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SetBalanceMode &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>

<P><STRONG><a name="[1f7]"></a>SetCrossoverPointsMode</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>

<P><STRONG><a name="[1f9]"></a>Phase_Relay</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Phase_Relay
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
</UL>

<P><STRONG><a name="[1ce]"></a>SetSpkPhase</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacInvert
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_Relay
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPhaseSetup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerPhaseMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSW
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSBL
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSBR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSL
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSR
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPL
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSW
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSBL
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSBR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPC
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPL
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDACPhase
</UL>

<P><STRONG><a name="[1fc]"></a>SetSpeakerPhaseMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SetSpeakerPhaseMode &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>

<P><STRONG><a name="[478]"></a>SetPanoramaMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setup_func.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>SetPanoramaToDefault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setup_func.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>ChangeListenProfileMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_Firmware_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerPhaseMode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrossoverPointsMode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceMode
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDistanceMode
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerMode
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1LPS
</UL>

<P><STRONG><a name="[11]"></a>AssignedInputSetup</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AssignedInputSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>SpkDimensionSetup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SpkDimensionSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Dimension
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>SpkPanoramaSetup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SpkPanoramaSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Panorama_On_Or_Off
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>SpkWidthSetup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SpkWidthSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Width
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1fe]"></a>SetSpkDistance</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspDelay
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDelaySetup
</UL>

<P><STRONG><a name="[10]"></a>SpkDelaySetup</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SpkDelaySetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkDistance
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>SpkPhaseSetup</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SpkPhaseSetup &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7CH1Mute
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>SpkEqSetup</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SpkEqSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>SpkCrossoverSetup</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspCorner
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>AvSyncDelaySetup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AvSyncDelaySetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AV_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SpkBlanceTestMode</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = SpkBlanceTestMode &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSignal
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[203]"></a>SetBalanceTestSignal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SetBalanceTestSignal &rArr; SetDspSignal &rArr; DspProcSignal &rArr; DSP_SGEN_ENABLE &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuProcBalance
</UL>

<P><STRONG><a name="[9]"></a>SpkBlanceSetup</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SpkBlanceSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
</UL>
<BR>[Address Reference Count : 2]<UL><LI> setup_menu.o(.text)
<LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LateSetup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = LateSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>PasswordModeSetup</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = PasswordModeSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>PasswordSetup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = PasswordSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>BrightSetup</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = BrightSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDimer
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>AutoInputSeekSetup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AutoInputSeekSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Zone2InputSetup</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = Zone2InputSetup &rArr; Zone2RadioMode &rArr; VfdTempDisp &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2AnalogInOff
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone2PowerOn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[207]"></a>GetVolumeIndex</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setup_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2VolumeSetup
</UL>

<P><STRONG><a name="[17]"></a>Zone2VolumeSetup</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Zone2VolumeSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Volume
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolumeIndex
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>IrControlSetup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = IrControlSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Zone2IrControlSetup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Zone2IrControlSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectIr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Zone2IrModeSetup</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Zone2IrModeSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>RearIrModeSetup</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = RearIrModeSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>TriggerSetup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = TriggerSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>TriggerSetup1</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = TriggerSetup1 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>TriggerSetup2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = TriggerSetup2 &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>RestoreDefaultSetup</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = RestoreDefaultSetup &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SpkConfigSetup</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = SpkConfigSetup &rArr; SetDspSpkMode &rArr; DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSL
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZR
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZL
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSBR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSBL
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSR
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZSL
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSBR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSBL
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>SpkDistanceSetup</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SpkDistanceSetup &rArr; SetSpkDistance &rArr; SetDspDelay &rArr; DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkDistance
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBL
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSL
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPL
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPs
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBL
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSR
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[208]"></a>SetAnalogInLevel</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SetAnalogInLevel &rArr; Set2ChVolume &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogLevelSetup
</UL>

<P><STRONG><a name="[13]"></a>AnalogLevelSetup</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AnalogLevelSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogInLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[209]"></a>SetAnalogInMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, setup_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSetup
</UL>

<P><STRONG><a name="[14]"></a>AnalogInSetup</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = AnalogInSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogInMode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HDMIInAudioSetup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HDMIInAudioSetup &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1e3]"></a>SetHdmiAudioOut</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetHdmiAudioOut &rArr; HdmiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMIAUIDOOUT
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASHDMIAO
</UL>

<P><STRONG><a name="[1a]"></a>CDPureAudio</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = CDPureAudio &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HDMIAUIDOOUT</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = HDMIAUIDOOUT &rArr; SetHdmiAudioOut &rArr; HdmiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHdmiAudioOut
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1ee]"></a>SetMasterVolumeLevel</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SetMasterVolumeLevel &rArr; SetMasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeValue
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterVolumeLevel
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
</UL>

<P><STRONG><a name="[18]"></a>MasterVolumeLevel</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = MasterVolumeLevel &rArr; SetMasterVolumeLevel &rArr; SetMasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1ef]"></a>SetZ2MasterVolumeLevel</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SetZ2MasterVolumeLevel &rArr; SetZ2MasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Volume
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeValue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone2PowerOn
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z2MasterVolumeLevel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ2SMV
</UL>

<P><STRONG><a name="[19]"></a>Z2MasterVolumeLevel</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Z2MasterVolumeLevel &rArr; SetZ2MasterVolumeLevel &rArr; SetZ2MasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1ec]"></a>MaxVolumeLevel</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = MaxVolumeLevel &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxVolumeLevel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO
</UL>

<P><STRONG><a name="[27]"></a>SetMaxVolumeLevel</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SetMaxVolumeLevel &rArr; MaxVolumeLevel &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxVolumeLevel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[1e5]"></a>ReadName</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReadName &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogoSetup
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNameSetup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRSN
</UL>

<P><STRONG><a name="[1c5]"></a>WriteName</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = WriteName &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdRSN
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogoSetup
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNameSetup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRSN
</UL>

<P><STRONG><a name="[20e]"></a>ChanegName</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ChanegName &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogoSetup
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNameSetup
</UL>

<P><STRONG><a name="[12]"></a>InputNameSetup</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = InputNameSetup &rArr; WriteName &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanegName
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteName
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadName
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LogoSetup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, setup_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = LogoSetup &rArr; WriteName &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanegName
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteName
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadName
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[20f]"></a>ReadPwd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ReadPwd &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
</UL>

<P><STRONG><a name="[210]"></a>WritePwd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = WritePwd &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
</UL>

<P><STRONG><a name="[211]"></a>read_curr_option</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_curr_option
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadEeprom
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupload_memroy1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLoadCurOption
</UL>

<P><STRONG><a name="[213]"></a>write_curr_option</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_curr_option
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
</UL>

<P><STRONG><a name="[214]"></a>execute_curr_option</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = execute_curr_option
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadEeprom
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupload_memroy1
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
</UL>

<P><STRONG><a name="[215]"></a>load_default_option</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = load_default_option
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
</UL>

<P><STRONG><a name="[216]"></a>Inquire_restrict_option</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Inquire_restrict_option
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
</UL>

<P><STRONG><a name="[217]"></a>MenuLoadCurOption</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MenuLoadCurOption &rArr; read_curr_option
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
</UL>

<P><STRONG><a name="[21f]"></a>MenuFindPage</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, setup_menu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuDisplay
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuInit
</UL>

<P><STRONG><a name="[218]"></a>MenuCaptionShow</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MenuCaptionShow &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
</UL>

<P><STRONG><a name="[219]"></a>MenuHeaderShow</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = MenuHeaderShow &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[21a]"></a>VfdShowMenuOption</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
</UL>

<P><STRONG><a name="[21b]"></a>MenuItemShow</STRONG> (Thumb, 1188 bytes, Stack size 72 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdShowMenuOption
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCaptionShow
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inquire_restrict_option
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
</UL>

<P><STRONG><a name="[21d]"></a>MenuDisplay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuHeaderShow
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuDisplay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVfdFlash
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuInit
</UL>

<P><STRONG><a name="[5]"></a>SetupMenuDisplay</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = SetupMenuDisplay &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFindPage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[220]"></a>SetupMenuInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = SetupMenuInit &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRemoteRepeatKey
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuFindPage
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
</UL>

<P><STRONG><a name="[221]"></a>VfdInitDispPwd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = VfdInitDispPwd &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
</UL>

<P><STRONG><a name="[222]"></a>SetupInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = SetupInit &rArr; SetupMenuInit &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdInitDispPwd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPwd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[224]"></a>SetupExit</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = SetupExit &rArr; SpkBlanceTestMode &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRemoteRepeatKey
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExitMenu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[226]"></a>SetupMenuProcBalance</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetupMenuProcBalance &rArr; SetBalanceTestSignal &rArr; SetDspSignal &rArr; DspProcSignal &rArr; DSP_SGEN_ENABLE &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceTestSignal
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
</UL>

<P><STRONG><a name="[227]"></a>ProcSetupUpKey</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ProcSetupUpKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuProcBalance
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLoadCurOption
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inquire_restrict_option
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[229]"></a>ProcSetupDownKey</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ProcSetupDownKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuProcBalance
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLoadCurOption
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inquire_restrict_option
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[22a]"></a>ProcSetupLeftKey</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ProcSetupLeftKey &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_curr_option
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[22b]"></a>ProcSetupRightKey</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ProcSetupRightKey &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_curr_option
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[22c]"></a>ProcSetupEnterKey</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ProcSetupEnterKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRemoteRepeatKey
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRemoteRepeatKey
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdInitDispPwd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_curr_option
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[2c]"></a>SetupExitMenu</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = SetupExitMenu &rArr; SetupExit &rArr; SpkBlanceTestMode &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tbl.o(.data)
</UL>
<P><STRONG><a name="[22d]"></a>setupload_memroy1</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, setup_menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>

<P><STRONG><a name="[22e]"></a>SetupLoadEeprom</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetupLoadEeprom &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemStartupValue
</UL>

<P><STRONG><a name="[1e9]"></a>SetupLoadDefault</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SetupLoadDefault &rArr; WritePwd &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_default_option
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_curr_option
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePwd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDefaultSetup
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemStartupValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRD
</UL>

<P><STRONG><a name="[22f]"></a>PwdKeyService</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = PwdKeyService &rArr; SetupMenuInit &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExitMenu
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdInitDispPwd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePwd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>

<P><STRONG><a name="[230]"></a>SetupKeyService</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = SetupKeyService &rArr; ProcSetupEnterKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExitMenu
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupProcMessage
</UL>

<P><STRONG><a name="[231]"></a>SetupFlashHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SetupFlashHandler &rArr; MsgSetFlash &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[232]"></a>UpdateVfdFlash</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = UpdateVfdFlash &rArr; MenuDisplay &rArr; MenuItemShow &rArr; VfdShowMenuOption &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdbufferChar
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupProcMessage
</UL>

<P><STRONG><a name="[109]"></a>SetupProcMessage</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setup_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = SetupProcMessage &rArr; Zone1ProcMessage &rArr; Zone1ProcessKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcDimerOff
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVfdFlash
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupKeyService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>IsCurFocusTid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateVolumeValue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundProcMessage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[223]"></a>SetCurFocusTid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Software_Update
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
</UL>

<P><STRONG><a name="[19c]"></a>GetCurFocusTid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZone1Channel
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExitMenu
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioLoop
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMessage
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
</UL>

<P><STRONG><a name="[163]"></a>ProcMessage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>VfdRefresh</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vfd_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = VfdRefresh &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVfdOwner
</UL>

<P><STRONG><a name="[233]"></a>GetVfdbufferChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vfd_disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVfdFlash
</UL>

<P><STRONG><a name="[236]"></a>SetVfdOwner</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vfd_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SetVfdOwner &rArr; VfdRefresh &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdRefresh
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[32d]"></a>VfdTimerHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, vfd_disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_irq (via Veneer)
</UL>

<P><STRONG><a name="[239]"></a>SetVfdDispMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vfd_disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
</UL>

<P><STRONG><a name="[202]"></a>VfdDisplay</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, vfd_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDefaultSetup
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSaveVfd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Text_Display
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Phase_Display
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetupConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNA
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConnectHelp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDisplay
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateZone1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateVolumeValue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVfdFlash
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdInitDispPwd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdShowMenuOption
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuHeaderShow
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCaptionShow
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[21e]"></a>VfdDisplayBlank</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vfd_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = VfdDisplayBlank &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Text_Display
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Phase_Display
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDisplay
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateZone1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdInitDispPwd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDisplay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
</UL>

<P><STRONG><a name="[1b8]"></a>VfdTempDisp</STRONG> (Thumb, 110 bytes, Stack size 104 bytes, vfd_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = VfdTempDisp &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVfdDispMode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQ
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
</UL>

<P><STRONG><a name="[1b7]"></a>VfdTempDispBlank</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, vfd_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = VfdTempDispBlank &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQ
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
</UL>

<P><STRONG><a name="[1ae]"></a>IsZone1VolumeValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, zone1_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2V
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VM
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[1a2]"></a>MsgSetMute</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetMute &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2M
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1M
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[23a]"></a>MsgSetStream</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetStream &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseTureHDCfg
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHRACfg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHDCfg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsCfg
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseAc3Cfg
</UL>

<P><STRONG><a name="[19d]"></a>MsgSetInputSource</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetInputSource &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignedInputSetup
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSetup
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN7_1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN7
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN8
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN7
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN6
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN5
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN3
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN2
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN1
</UL>

<P><STRONG><a name="[23b]"></a>MsgSetDSPSetting</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetDSPSetting &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcNeoKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcCesKey
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcCesKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcCesKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTS_Cfg_Change_Deal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC3_Cfg_Change_Deal
</UL>

<P><STRONG><a name="[23c]"></a>MsgSetDSPHDMISetting</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetDSPHDMISetting &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcPliiKey
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_irq (via Veneer)
</UL>

<P><STRONG><a name="[23d]"></a>MsgSetDspChannel</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetDspChannel &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
</UL>

<P><STRONG><a name="[23e]"></a>MsgSetSoftMute</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetSoftMute &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_irq (via Veneer)
</UL>

<P><STRONG><a name="[1a0]"></a>MsgSetPower</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetPower &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2P
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1P
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[1a9]"></a>MsgSetVfdShow</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EX
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExitMenu
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioLoop
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplayExit
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveExit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcSurKey
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcPliiKey
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcSurKey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcNeoKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcCesKey
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshHandle
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDP
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAP
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_irq (via Veneer)
</UL>

<P><STRONG><a name="[1e4]"></a>MsgSetDimer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetDimer &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightSetup
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASFP
</UL>

<P><STRONG><a name="[182]"></a>MsgSetKey</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeadphoneDetect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_key_hold
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_key_press
</UL>

<P><STRONG><a name="[1ac]"></a>MsgSetVolume</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetVolume &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2V
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VM
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
</UL>

<P><STRONG><a name="[228]"></a>MsgSetFlash</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetFlash &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupFlashHandler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupDownKey
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupUpKey
</UL>

<P><STRONG><a name="[1a1]"></a>IsZone1PowerOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zone1_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1P
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[242]"></a>SetRefresh</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zone1_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateVolumeValue
</UL>

<P><STRONG><a name="[23f]"></a>RefreshHandle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = RefreshHandle &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_irq (via Veneer)
</UL>

<P><STRONG><a name="[240]"></a>ShowVersion</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ShowVersion &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[241]"></a>VfdUpdateVolumeValue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = VfdUpdateVolumeValue &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRefresh
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateZone1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[243]"></a>VfdUpdateStreamType</STRONG> (Thumb, 3100 bytes, Stack size 16 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = VfdUpdateStreamType &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateZone1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[244]"></a>VfdUpdateZone1</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = VfdUpdateZone1 &rArr; VfdUpdateStreamType &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateVolumeValue
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[1c3]"></a>GetSrcName</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GetSrcName &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
</UL>

<P><STRONG><a name="[245]"></a>SelectSource</STRONG> (Thumb, 1038 bytes, Stack size 24 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SelectSource &rArr; SystemSearchInputChannel &rArr; CheckInputChannel &rArr; DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSearchInputChannel
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Port_Select
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalInSelect71Channel
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Select
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInputTypeSelect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
</UL>

<P><STRONG><a name="[24d]"></a>ProcInputSelect</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = ProcInputSelect &rArr; SelectSource &rArr; SystemSearchInputChannel &rArr; CheckInputChannel &rArr; DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[24e]"></a>PowerOnDisplay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = PowerOnDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[20b]"></a>SetMasterVolumeValue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SetMasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeLevel
</UL>

<P><STRONG><a name="[282]"></a>GetVolumeEepromSetValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, zone1_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[24f]"></a>SystemPowerOn</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = SystemPowerOn &rArr; PowerOnDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetDimerValue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SLSR_Mas9116_Mute
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SBLSBR_Mas9116_Mute
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLFR_Mas9116_Mute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CENLFE_Mas9116_Mute
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResetPin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoPowerOn
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLed
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC2132HwReset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDACReg
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCs8416
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDisplay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeValue
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
</UL>

<P><STRONG><a name="[25d]"></a>SystemPowerOff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = SystemPowerOff &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffMuteControl
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLed
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
</UL>

<P><STRONG><a name="[25f]"></a>Zone1Mute</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Zone1Mute
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeadphoneMute
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalance_Mute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7CH1Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
</UL>

<P><STRONG><a name="[262]"></a>SetAutoseekFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetAutoseekFlag &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[263]"></a>IsAutoSeekOn</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = IsAutoSeekOn &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
</UL>

<P><STRONG><a name="[264]"></a>IsEverAutoseek</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = IsEverAutoseek &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
</UL>

<P><STRONG><a name="[265]"></a>SeekSelect</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SeekSelect &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
</UL>

<P><STRONG><a name="[266]"></a>ProcAutoSeekSur</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = ProcAutoSeekSur &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[268]"></a>ProcZone1PowerOn</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = ProcZone1PowerOn &rArr; ProcAutoSeekSur &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSearchInputChannel
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEverAutoseek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoSeekOn
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAutoseekFlag
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHdmiAudioOut
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[26c]"></a>ProcZone1PowerOff</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ProcZone1PowerOff &rArr; SystemPowerOff &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[15d]"></a>LoadSystemStartupValue</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = LoadSystemStartupValue &rArr; SetupLoadDefault &rArr; WritePwd &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadEeprom
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26d]"></a>Zone1ProcAutoSeek</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, zone1_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>

<P><STRONG><a name="[26e]"></a>PcmProcCesKey</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = PcmProcCesKey &rArr; DspDecodePcm &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[26f]"></a>Ac3ProcCesKey</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Ac3ProcCesKey &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[270]"></a>DtsProcCesKey</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DtsProcCesKey &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[271]"></a>PcmProcNeoKey</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = PcmProcNeoKey &rArr; DspDecodePcm &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[272]"></a>PcmProcPliiKey</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = PcmProcPliiKey &rArr; DspDecodePcm &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[273]"></a>PcmProcSurKey</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = PcmProcSurKey &rArr; DspSetCrossbarEffect &rArr; Change_DSP_VIRTUALIZER_Code &rArr; DSP_CFG_VIRTUALIZER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DECODE_MODE_STEREO
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[275]"></a>Ac3ProcPliiKey</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Ac3ProcPliiKey &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadTRUEHD
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPHDMISetting
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[277]"></a>DtsProcPliiKey</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DtsProcPliiKey &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPHDMISetting
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[278]"></a>Ac3ProcSurKey</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Ac3ProcSurKey &rArr; DspSetCrossbarEffect &rArr; Change_DSP_VIRTUALIZER_Code &rArr; DSP_CFG_VIRTUALIZER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DECODE_MODE_MULTI
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[27a]"></a>IsHidenKey</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = IsHidenKey &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[27b]"></a>decode_mode_refesh</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = decode_mode_refesh &rArr; DspDecodePcm &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[108]"></a>Zone1ProcMessage</STRONG> (Thumb, 1458 bytes, Stack size 40 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = Zone1ProcMessage &rArr; Zone1ProcessKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetDimerValue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcDimerOff
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOutSetting
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mode_refesh
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolumeEepromSetValue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateZone1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateVolumeValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone1VolumeValid
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone1PowerOn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupProcMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>IsZone2PowerOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zone2_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2P
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeLevel
</UL>

<P><STRONG><a name="[28e]"></a>IsZone2VolumeValid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, zone2_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
</UL>

<P><STRONG><a name="[20d]"></a>SetZ2MasterVolumeValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetZ2MasterVolumeValue &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeLevel
</UL>

<P><STRONG><a name="[283]"></a>ProcZone2PowerOn</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ProcZone2PowerOn &rArr; SystemPowerOn &rArr; PowerOnDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeValue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
</UL>

<P><STRONG><a name="[284]"></a>ProcZone2PowerOff</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ProcZone2PowerOff &rArr; SystemPowerOff &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2Mute
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDRadioPower
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVfdOwner
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
</UL>

<P><STRONG><a name="[287]"></a>Zone2ProcInputSelect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Zone2ProcInputSelect &rArr; Zone2SelectChannel &rArr; Zone2DigiSelectChannel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDRadioPower
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
</UL>

<P><STRONG><a name="[1bd]"></a>Zone2RadioMode</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Zone2RadioMode &rArr; VfdTempDisp &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Write_Freq_Command
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Volume_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Mute_Command
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTuner
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDRadioPower
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
</UL>

<P><STRONG><a name="[10b]"></a>Zone2ProcMessage</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Zone2ProcMessage &rArr; ProcZone2PowerOn &rArr; SystemPowerOn &rArr; PowerOnDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcDimerOff
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2Mute
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone2VolumeValid
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Volume
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone2PowerOn
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>MsgSetIrc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetIrc &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetupConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundInit
</UL>

<P><STRONG><a name="[27e]"></a>AutoSoundInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AutoSoundInit &rArr; MsgSetIrc &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[290]"></a>AutoSoundExit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = AutoSoundExit &rArr; VfdDisplayBlank &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInputTypeSelect
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetupConfig
</UL>

<P><STRONG><a name="[298]"></a>InitSpkPara</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, auto_sound.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[47a]"></a>IsAnySpkValid</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, auto_sound.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>DisplayConnectHelp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = DisplayConnectHelp &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[292]"></a>DisplayNA</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = DisplayNA &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
</UL>

<P><STRONG><a name="[293]"></a>GetIrc2EqValue</STRONG> (Thumb, 1008 bytes, Stack size 560 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = GetIrc2EqValue &rArr; DspReadIrc1 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConvert_8_24_Value
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
</UL>

<P><STRONG><a name="[2d]"></a>ASProcSetupConfig</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ASProcSetupConfig &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>ASProcSpeakerCheck</STRONG> (Thumb, 1504 bytes, Stack size 40 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ASProcSpeakerCheck &rArr; DisplayConnectHelp &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspIrc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConvert_8_24_Value
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrc2ValidResult
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpkDistance
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Setup_DAC_Phase
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayConnectHelp
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSpkPara
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInputTypeSelect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>ASProcSetDistance</STRONG> (Thumb, 722 bytes, Stack size 40 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ASProcSetDistance &rArr; DisplayNA &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNA
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>ASProcSetBalance</STRONG> (Thumb, 1164 bytes, Stack size 32 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = ASProcSetBalance &rArr; GetIrc2EqValue &rArr; DspReadIrc1 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspIrc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConvert_8_24_Value
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrc2ValidResult
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNA
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[47b]"></a>sort</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, auto_sound.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>ASProcSetCrossoverPoints</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ASProcSetCrossoverPoints &rArr; DisplayNA &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspIrc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrc2ValidResult
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNA
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>ASProcSetRoomEQ</STRONG> (Thumb, 812 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ASProcSetRoomEQ &rArr; DisplayNA &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspIrc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_Function
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrc2ValidResult
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNA
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[1b1]"></a>FindBalancePosition</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindBalancePosition &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via Veneer)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSW
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLL
</UL>

<P><STRONG><a name="[2a4]"></a>SPK_Phase_Display</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = SPK_Phase_Display &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
</UL>

<P><STRONG><a name="[33]"></a>ASProcSetSpeakerphase</STRONG> (Thumb, 3110 bytes, Stack size 24 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = ASProcSetSpeakerphase &rArr; SpkCrossoverSetup &rArr; SetDspCorner &rArr; DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPhaseSetup
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkEqSetup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceSetup
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Phase_Display
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNA
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetIrc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_sound.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>AutoSoundProcMessage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutoSoundProcMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.constdata)
</UL>
<P><STRONG><a name="[2b2]"></a>SetRadioStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcTextDisplayKey
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInit
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveExit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2bc]"></a>GetRadioStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioLoop
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[1dc]"></a>IsFreqValid</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAT
</UL>

<P><STRONG><a name="[1dd]"></a>MsgSetRadioFreq</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetRadioFreq &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAT
</UL>

<P><STRONG><a name="[1db]"></a>MsgSetRadioSearch</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetRadioSearch &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdT
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAT
</UL>

<P><STRONG><a name="[1de]"></a>MsgSetRadioLoadPreset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = MsgSetRadioLoadPreset &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDP
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDP
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAP
</UL>

<P><STRONG><a name="[2a6]"></a>MsgTextDisplay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = MsgTextDisplay &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
</UL>

<P><STRONG><a name="[2a7]"></a>MsgSetRadioSavePreset</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MsgSetRadioSavePreset &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcSaveKey
</UL>

<P><STRONG><a name="[1e1]"></a>SaveFmPreset</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SaveFmPreset &rArr; EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS
</UL>

<P><STRONG><a name="[1e0]"></a>LoadRadioPreset</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = LoadRadioPreset &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS
</UL>

<P><STRONG><a name="[47c]"></a>IsTunerIfCorrect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_task.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>ISValidTunerPostion</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2a8]"></a>RadioDisplay</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = RadioDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsZone2PowerOn
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2a9]"></a>GetTextDispBuffer</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GetTextDispBuffer &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_IsValid
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Text_Display
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2ab]"></a>Radio_Text_Display</STRONG> (Thumb, 448 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = Radio_Text_Display &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextDispBuffer
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2ac]"></a>RadioChangeMode</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, radio_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSelectChannel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Volume_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Mute_Command
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTuner
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDRadioPower
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>

<P><STRONG><a name="[19f]"></a>RadioInit</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = RadioInit &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRemoteRepeatKey
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSelectChannel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Volume_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Mute_Command
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTuner
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDRadioPower
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
</UL>

<P><STRONG><a name="[19e]"></a>RadioExit</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RadioExit &rArr; VfdDisplayBlank &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDRadioPower
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteRemoteRepeatKey
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[28d]"></a>CalcRadioPosition</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcSaveKey
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2c0]"></a>CalcRadioFreq</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2af]"></a>CalcCurrenTunerFreq</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = CalcCurrenTunerFreq &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2b3]"></a>UpdateSaveVfd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = UpdateSaveVfd &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcSaveKey
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInit
</UL>

<P><STRONG><a name="[2b5]"></a>TextDisplayExit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = TextDisplayExit &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcTextDisplayKey
</UL>

<P><STRONG><a name="[2b6]"></a>SaveRadioStatus</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SaveRadioStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
</UL>

<P><STRONG><a name="[356]"></a>AcqStatusSave</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acq_status
</UL>

<P><STRONG><a name="[47d]"></a>GetCurrProgram</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_task.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>C11_Tuner_SIS_Change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
</UL>

<P><STRONG><a name="[47e]"></a>C11_Tuner_PSD_Change</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_task.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>PreProcSaveKey</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = PreProcSaveKey &rArr; UpdateSaveVfd &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSaveVfd
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSavePreset
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveExit
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRadioPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
</UL>

<P><STRONG><a name="[2ba]"></a>PreProcTextDisplayKey</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = PreProcTextDisplayKey &rArr; TextDisplayExit &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextDisplayExit
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
</UL>

<P><STRONG><a name="[2bb]"></a>RadioKeyService</STRONG> (Thumb, 1096 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = RadioKeyService &rArr; RadioDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcTextDisplayKey
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcSaveKey
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgTextDisplay
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadioStatus
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcDigitKey
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRadioPosition
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[10a]"></a>RadioProcMessage</STRONG> (Thumb, 1930 bytes, Stack size 24 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = RadioProcMessage &rArr; Zone1ProcMessage &rArr; Zone1ProcessKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcDimerOff
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCurrenTunerFreq
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRadioFreq
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Text_Display
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextDispBuffer
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISValidTunerPostion
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadioStatus
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioStatus
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Write_Freq_Command
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Mute_Command
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRadioPosition
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVfdOwner
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioSearch
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFreqValid
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Seek_Command
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Req_Tune_Up
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Req_Tune_Down
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>RadioLoop</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RadioLoop &rArr; Radio_GetStatus &rArr; RBDS_Decode &rArr; get_rbds_group &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadioStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>Uart0Isr</STRONG> (ARM, 68 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart0Isr &rArr; InQueue &rArr; IsQueueFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InQueue (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>Uart1Isr</STRONG> (ARM, 68 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart1Isr &rArr; InQueue &rArr; IsQueueFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InQueue (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[2c5]"></a>SetUart0Baudrate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SetUart0Baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>

<P><STRONG><a name="[2c6]"></a>Uart0Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Uart0Init &rArr; SetUart0Baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUart0Baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[16b]"></a>Uart0Send</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11Rs232
</UL>

<P><STRONG><a name="[2c8]"></a>SetUart1Baudrate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SetUart1Baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[2c9]"></a>Uart1Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Uart1Init &rArr; SetUart1Baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUart1Baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[34b]"></a>Uart1Send</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialWrite
</UL>

<P><STRONG><a name="[154]"></a>UartInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UartInit &rArr; Uart1Init &rArr; SetUart1Baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systeminit
</UL>

<P><STRONG><a name="[2ca]"></a>Cs8416WriteByte</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, cs8416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Cs8416WriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCs8416
</UL>

<P><STRONG><a name="[2cc]"></a>Cs8416ReadByte</STRONG> (Thumb, 40 bytes, Stack size 72 bytes, cs8416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Cs8416ReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCs8416Pcm
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCs8416Unlock
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCs8416Unlock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416GetFreq
</UL>

<P><STRONG><a name="[2ce]"></a>Cs8416GetFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cs8416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Cs8416GetFreq &rArr; Cs8416ReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[2cf]"></a>CheckCs8416Unlock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cs8416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = CheckCs8416Unlock &rArr; Cs8416ReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[2d0]"></a>IsCs8416Unlock</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cs8416.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416ReadByte
</UL>

<P><STRONG><a name="[2d1]"></a>IsCs8416Pcm</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cs8416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = IsCs8416Pcm &rArr; Cs8416ReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
</UL>

<P><STRONG><a name="[255]"></a>InitCs8416</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cs8416.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = InitCs8416 &rArr; Cs8416WriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[2d2]"></a>SelectDSD</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SelectDSD
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport4
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_word
</UL>

<P><STRONG><a name="[2d5]"></a>write_word</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_word &rArr; SelectDSD
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport2
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectDSD
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcm1796Write
</UL>

<P><STRONG><a name="[2d8]"></a>Pcm1796Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pcm1796Write &rArr; write_word &rArr; SelectDSD
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Setup_DAC_Phase
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDACReg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacInvert
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
</UL>

<P><STRONG><a name="[1fb]"></a>DacInvert</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DacInvert &rArr; Pcm1796Write &rArr; write_word &rArr; SelectDSD
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcm1796Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
</UL>

<P><STRONG><a name="[297]"></a>Auto_Setup_DAC_Phase</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Auto_Setup_DAC_Phase &rArr; Pcm1796Write &rArr; write_word &rArr; SelectDSD
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcm1796Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[2d9]"></a>InitDACPhase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = InitDACPhase &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDACReg
</UL>

<P><STRONG><a name="[1e8]"></a>DacMute</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DacMute &rArr; Pcm1796Write &rArr; write_word &rArr; SelectDSD
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcm1796Write
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDefaultSetup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuProcBalance
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRD
</UL>

<P><STRONG><a name="[256]"></a>InitDACReg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = InitDACReg &rArr; InitDACPhase &rArr; SetSpkPhase &rArr; EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDACPhase
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcm1796Write
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[2da]"></a>DSD_Choose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSD_Choose
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
</UL>

<P><STRONG><a name="[15f]"></a>InitDSDMode</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = InitDSDMode &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Select
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Choose
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcm1796Write
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
</UL>

<P><STRONG><a name="[1b2]"></a>EepromWriteByte</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = EepromWriteByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSW
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLL
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2VolumeSetup
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2IrModeSetup
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2IrControlSetup
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z2MasterVolumeLevel
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSetup2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSetup1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSetup
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkWidthSetup
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPhaseSetup
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPanoramaSetup
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkEqSetup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDimensionSetup
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDelaySetup
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceSetup
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxVolumeLevel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RearIrModeSetup
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordSetup
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModeSetup
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterVolumeLevel
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LateSetup
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrControlSetup
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMIInAudioSetup
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMIAUIDOOUT
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDPureAudio
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightSetup
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvSyncDelaySetup
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoInputSeekSetup
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignedInputSetup
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogLevelSetup
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSetup
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemStartupValue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAutoseekFlag
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePwd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeValue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteName
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxVolumeLevel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ2SMV
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASDD
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAIS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASTO3
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASTO2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASTO1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIR2M
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIRM
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIR2C
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIRC
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASFP
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAVD
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASHDMIAO
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASSP
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACNR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN7_1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN8
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN7
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN6
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN5
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN4
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ACN1
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN8
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN7
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN6
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN5
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN3
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN2
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1IN1
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDEL
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDIM
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSW
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSBL
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSBR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSL
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPSR
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSSPL
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLL
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSW
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSBL
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSBR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSL
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPSR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPC
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSSPL
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillEepromValue
</UL>

<P><STRONG><a name="[1d0]"></a>EepromReadByte</STRONG> (Thumb, 40 bytes, Stack size 72 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = EepromReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2VolumeSetup
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2IrModeSetup
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2IrControlSetup
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Z2MasterVolumeLevel
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSetup2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSetup1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSetup
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkWidthSetup
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPhaseSetup
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPanoramaSetup
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkEqSetup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDistanceSetup
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDimensionSetup
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDelaySetup
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkCrossoverSetup
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkConfigSetup
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceSetup
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxVolumeLevel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RearIrModeSetup
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordSetup
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PasswordModeSetup
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterVolumeLevel
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LateSetup
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrControlSetup
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMIInAudioSetup
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMIAUIDOOUT
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDPureAudio
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightSetup
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvSyncDelaySetup
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoInputSeekSetup
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssignedInputSetup
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogLevelSetup
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSetup
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSystemStartupValue
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSearchInputChannel
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEverAutoseek
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAutoSeekOn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadEeprom
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPwd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerPhaseMode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrossoverPointsMode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceMode
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeLevel
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadName
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxVolumeLevel
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRadioPreset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdAZ1SMV
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VS_
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VBR_
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VBL_
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VSR_
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VSL_
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VC_
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VFR_
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VFL_
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDEL
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDIM
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugEepromValue
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDACPhase
</UL>

<P><STRONG><a name="[2dc]"></a>FillEepromValue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
</UL>

<P><STRONG><a name="[2dd]"></a>DebugEepromValue</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
</UL>

<P><STRONG><a name="[2d6]"></a>wait_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2cdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max335SendByte
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Read
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116WriteWord
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094Sendbyte
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iec4094Sendbyte
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadNByte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteNByte
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readbyte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_word
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
</UL>

<P><STRONG><a name="[2e3]"></a>I2CWriteNByte</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendByte
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendNByte
</UL>

<P><STRONG><a name="[2e4]"></a>I2CReadNByte</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, i2cdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readbyte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>

<P><STRONG><a name="[2cb]"></a>I2C_bytewrite</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416WriteByte
</UL>

<P><STRONG><a name="[2cd]"></a>I2C_byteread</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readbyte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416ReadByte
</UL>

<P><STRONG><a name="[184]"></a>read165</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ic165.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read165
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensePort1
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[2e9]"></a>Ext4094Sendbyte</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4094Cs
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iec4094Sendbyte
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>

<P><STRONG><a name="[2eb]"></a>Ext4094SetBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ext4094SetBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094Sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SLSR_Mas9116_Mute
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SBLSBR_Mas9116_Mute
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLFR_Mas9116_Mute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CENLFE_Mas9116_Mute
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Zone2_Mas9116_Mute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UART_SEL
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_RST
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_ISR
</UL>

<P><STRONG><a name="[2ec]"></a>Ext4094ClearBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094Sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SLSR_Mas9116_Mute
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SBLSBR_Mas9116_Mute
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLFR_Mas9116_Mute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CENLFE_Mas9116_Mute
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Zone2_Mas9116_Mute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UART_SEL
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_RST
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_ISR
</UL>

<P><STRONG><a name="[25a]"></a>Set_SLSR_Mas9116_Mute</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_SLSR_Mas9116_Mute &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mas9116_HardMute
</UL>

<P><STRONG><a name="[2ed]"></a>Set_HDMI_ISR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_HDMI_ISR &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Software_Update
</UL>

<P><STRONG><a name="[2ee]"></a>Set_HDMI_RST</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_HDMI_RST &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC2132HwReset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
</UL>

<P><STRONG><a name="[2ef]"></a>Set_UART_SEL</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_UART_SEL &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Software_Update
</UL>

<P><STRONG><a name="[2f0]"></a>Set_Zone2_Mas9116_Mute</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_Zone2_Mas9116_Mute &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
</UL>

<P><STRONG><a name="[259]"></a>Set_FLFR_Mas9116_Mute</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_FLFR_Mas9116_Mute &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mas9116_HardMute
</UL>

<P><STRONG><a name="[25b]"></a>Set_CENLFE_Mas9116_Mute</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_CENLFE_Mas9116_Mute &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mas9116_HardMute
</UL>

<P><STRONG><a name="[25c]"></a>Set_SBLSBR_Mas9116_Mute</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_SBLSBR_Mas9116_Mute &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094ClearBit
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mas9116_HardMute
</UL>

<P><STRONG><a name="[2f1]"></a>Set_Mas9116_HardMute</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ic4094.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SLSR_Mas9116_Mute
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SBLSBR_Mas9116_Mute
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLFR_Mas9116_Mute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CENLFE_Mas9116_Mute
</UL>

<P><STRONG><a name="[257]"></a>LPC2132HwReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPC2132HwReset &rArr; Set_HDMI_RST &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_RST
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Software_Update
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[258]"></a>IC4094_Default</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IC4094_Default &rArr; Set_SLSR_Mas9116_Mute &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SLSR_Mas9116_Mute
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SBLSBR_Mas9116_Mute
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLFR_Mas9116_Mute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CENLFE_Mas9116_Mute
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4094OE
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Zone2_Mas9116_Mute
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UART_SEL
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_RST
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[27d]"></a>HDMI_Software_Update</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HDMI_Software_Update &rArr; LPC2132HwReset &rArr; Set_HDMI_RST &rArr; Ext4094ClearBit &rArr; Ext4094Sendbyte &rArr; Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC2132HwReset
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurFocusTid
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UART_SEL
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HDMI_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[1fa]"></a>SetIoport0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Setup_DAC_Phase
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_Relay
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Read
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116WriteWord
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMas9116
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDac
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_word
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectDSD
</UL>

<P><STRONG><a name="[30e]"></a>SensePort0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Read
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspBusy
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
</UL>

<P><STRONG><a name="[2d4]"></a>SetIoport1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read165
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Read
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116WriteWord
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMas9116
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDac
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectDSD
</UL>

<P><STRONG><a name="[2e5]"></a>SensePort1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read165
</UL>

<P><STRONG><a name="[2d7]"></a>SetIoport2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDac
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_word
</UL>

<P><STRONG><a name="[47f]"></a>SensePort2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ioport.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>SetIoport3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ioport.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>SensePort3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ioport.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>SetIoport4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDac
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectDSD
</UL>

<P><STRONG><a name="[482]"></a>SensePort4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>SystemPower</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[252]"></a>PowerLed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStandby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[15c]"></a>LedStandby</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedStandby
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLed
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31c]"></a>InitPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[286]"></a>HDRadioPower</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
</UL>

<P><STRONG><a name="[321]"></a>InitHDRaidoPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[250]"></a>SetResetPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
</UL>

<P><STRONG><a name="[31f]"></a>InitResetPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[2f3]"></a>SystemReset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ioport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResetPin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[2f4]"></a>InitDac</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitDac
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport4
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport2
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[2f6]"></a>SetMas9116Cs0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
</UL>

<P><STRONG><a name="[2f7]"></a>SetMas9116Cs1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
</UL>

<P><STRONG><a name="[2f8]"></a>SetMas9116Cs2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
</UL>

<P><STRONG><a name="[2f9]"></a>SetMas9116Cs3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
</UL>

<P><STRONG><a name="[2fa]"></a>SetMas9116Cs4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
</UL>

<P><STRONG><a name="[2fb]"></a>SetMas9116Cs5</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
</UL>

<P><STRONG><a name="[2f5]"></a>SelectMas9116</STRONG> (Thumb, 314 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SelectMas9116
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs5
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs3
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs2
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs0
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
</UL>

<P><STRONG><a name="[2fc]"></a>InitMas9116</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitMas9116
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[308]"></a>SetMax335Data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max335SendByte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMAS335
</UL>

<P><STRONG><a name="[307]"></a>SetMax335Clk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max335SendByte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMAS335
</UL>

<P><STRONG><a name="[2fe]"></a>SetMax335Cs1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[2ff]"></a>SetMax335Cs2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[300]"></a>SetMax335Cs3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[301]"></a>SetMax335Cs4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[302]"></a>SetMax335Cs5</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[303]"></a>SetMax335Cs6</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[304]"></a>SetMax335Cs7</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[305]"></a>SetMax335Cs8</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoStandby
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>

<P><STRONG><a name="[2fd]"></a>SelectMax335</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SelectMax335
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs8
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs7
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs6
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs5
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs4
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs3
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs2
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs1
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
</UL>

<P><STRONG><a name="[306]"></a>InitMAS335</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitMAS335
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Clk
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Data
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[1ff]"></a>Set7CH1Mute</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPhaseSetup
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffMuteControl
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMuteControl
</UL>

<P><STRONG><a name="[309]"></a>SetZone2Mute</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2Mute
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMuteControl
</UL>

<P><STRONG><a name="[260]"></a>SetBalance_Mute</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffMuteControl
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMuteControl
</UL>

<P><STRONG><a name="[261]"></a>SetHeadphoneMute</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffMuteControl
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMuteControl
</UL>

<P><STRONG><a name="[285]"></a>Zone2Mute</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Zone2Mute
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
</UL>

<P><STRONG><a name="[30a]"></a>InitMuteControl</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitMuteControl
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeadphoneMute
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalance_Mute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7CH1Mute
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[25e]"></a>PowerOffMuteControl</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerOffMuteControl
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeadphoneMute
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalance_Mute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7CH1Mute
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
</UL>

<P><STRONG><a name="[31d]"></a>Init165</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[187]"></a>SenseEncoderSwitchPlus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderSwitchThread
</UL>

<P><STRONG><a name="[188]"></a>SenseEncoderSwitchMinus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderSwitchThread
</UL>

<P><STRONG><a name="[31e]"></a>InitEncoderSwitch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[249]"></a>DSP_Input_Stream_Select</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[323]"></a>Init_Dsp_Input_Select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[2db]"></a>DSD_Select</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Choose
</UL>

<P><STRONG><a name="[246]"></a>DSP_Select</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
</UL>

<P><STRONG><a name="[3ad]"></a>cd_dsp_channle_Select</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
</UL>

<P><STRONG><a name="[324]"></a>Init_DSD_Select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[33b]"></a>SenseAnalogSignal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAnalogIn
</UL>

<P><STRONG><a name="[2ea]"></a>Set4094Cs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094Sendbyte
</UL>

<P><STRONG><a name="[2f2]"></a>Set4094OE</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC4094_Default
</UL>

<P><STRONG><a name="[2e7]"></a>SetData4094</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iec4094Sendbyte
</UL>

<P><STRONG><a name="[2e8]"></a>Set4094Clk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iec4094Sendbyte
</UL>

<P><STRONG><a name="[322]"></a>Init4094</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[30c]"></a>SetDspReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPHwReset
</UL>

<P><STRONG><a name="[320]"></a>InitDspResetPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[30b]"></a>DSPHwReset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSPHwReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspReset
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcPower
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
</UL>

<P><STRONG><a name="[30d]"></a>SenseDspIrq</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SenseDspIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensePort0
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteDsp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadEq
</UL>

<P><STRONG><a name="[30f]"></a>SenseDspBusy</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SenseDspBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensePort0
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[311]"></a>Set_Spi_Cs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dsp_Spi_Pin
</UL>

<P><STRONG><a name="[312]"></a>Set_Spi_Clk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteDsp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dsp_Spi_Pin
</UL>

<P><STRONG><a name="[313]"></a>Set_Spi_MOSI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dsp_Spi_Pin
</UL>

<P><STRONG><a name="[346]"></a>Sense_Spi_MISO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteDsp
</UL>

<P><STRONG><a name="[310]"></a>Init_Dsp_Spi_Pin</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_Dsp_Spi_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_MOSI
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Clk
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Cs
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[10e]"></a>set_vfd_sda</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cs8416.o(.constdata)
<LI> vfddriver.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>set_vfd_scl</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cs8416.o(.constdata)
<LI> vfddriver.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>sense_vfd_sda</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> cs8416.o(.constdata)
<LI> vfddriver.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>sense_vfd_scl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> cs8416.o(.constdata)
<LI> vfddriver.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>set_sda1</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>set_scl1</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>sense_sda1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>sense_scl1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>set_sda2</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> channel.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>set_scl2</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> channel.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>sense_sda2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> channel.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>sense_scl2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> channel.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>set_sda_hdmi</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hdmi.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>set_scl_hdmi</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hdmi.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>sense_sda_hdmi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hdmi.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>sense_scl_hdmi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ioport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hdmi.o(.constdata)
</UL>
<P><STRONG><a name="[314]"></a>I2cPinInit</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2cPinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scl_hdmi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sda_hdmi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scl2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sda2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sda1
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scl1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vfd_sda
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vfd_scl
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[483]"></a>EnableEint0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>DisableEint0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>EnableEint1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
</UL>

<P><STRONG><a name="[316]"></a>DisableEint1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
</UL>

<P><STRONG><a name="[31b]"></a>EnableEint2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectIr
</UL>

<P><STRONG><a name="[31a]"></a>DisableEint2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectIr
</UL>

<P><STRONG><a name="[317]"></a>EnableEint3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
</UL>

<P><STRONG><a name="[315]"></a>DisableEint3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
</UL>

<P><STRONG><a name="[1e6]"></a>Zone1SelectIr</STRONG> (Thumb, 136 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Zone1SelectIr
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableEint3
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableEint3
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableEint1
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableEint1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrControlSetup
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIRC
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_config
</UL>

<P><STRONG><a name="[319]"></a>remote_config</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remote_config &rArr; Zone1SelectIr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1SelectIr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[1e7]"></a>Zone2SelectIr</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Zone2SelectIr
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableEint2
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableEint2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2IrControlSetup
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASIR2C
</UL>

<P><STRONG><a name="[15e]"></a>SetIoStandby</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetIoStandby
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs8
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs7
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs6
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs5
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs4
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs3
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs2
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Cs1
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Clk
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Data
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs5
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs3
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs2
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs0
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport4
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport2
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
</UL>

<P><STRONG><a name="[253]"></a>SetIoPowerOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ioport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[153]"></a>HardwareInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HardwareInit &rArr; SetTrigerOut2 &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPower
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_config
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cPinInit
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dsp_Spi_Pin
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDspResetPin
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init4094
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DSD_Select
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Dsp_Input_Select
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEncoderSwitch
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init165
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMuteControl
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMAS335
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMas9116
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDac
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitResetPin
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHDRaidoPower
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPower
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systeminit
</UL>

<P><STRONG><a name="[3f]"></a>exint3</STRONG> (ARM, 200 bytes, Stack size 40 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = exint3 &rArr; ir_core_philips &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioport.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>exint2</STRONG> (ARM, 236 bytes, Stack size 40 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = exint2 &rArr; ir2_core_philips &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir2_core_philips (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioport.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>exint1</STRONG> (ARM, 236 bytes, Stack size 40 bytes, ioport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = exint1 &rArr; ir_core_philips &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ioport.o(.text)
</UL>
<P><STRONG><a name="[327]"></a>exint0</STRONG> (ARM, 200 bytes, Stack size 40 bytes, ioport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips (via Veneer)
</UL>

<P><STRONG><a name="[328]"></a>repeat_IRkey_allowed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRemoteRepeatKey
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips
</UL>

<P><STRONG><a name="[156]"></a>InitRemoteRepeatKey</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = InitRemoteRepeatKey
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systeminit
</UL>

<P><STRONG><a name="[157]"></a>AddRemoteRepeatKey</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AddRemoteRepeatKey
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IRkey_allowed
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systeminit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[225]"></a>DeleteRemoteRepeatKey</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DeleteRemoteRepeatKey
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupEnterKey
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
</UL>

<P><STRONG><a name="[32a]"></a>zone2_repeat_IRkey_allowed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir2_core_philips
</UL>

<P><STRONG><a name="[325]"></a>ir_core_philips</STRONG> (Thumb, 646 bytes, Stack size 40 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ir_core_philips &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zone2_repeat_IRkey_allowed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IRkey_allowed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint0 (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint1 (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint3 (via Veneer)
</UL>

<P><STRONG><a name="[326]"></a>ir2_core_philips</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ir2_core_philips &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zone2_repeat_IRkey_allowed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint2 (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>DelayMs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDefaultSetup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStandby
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Text_Display
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeInit
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDh2On
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPC2132HwReset
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuProcBalance
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASRD
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Firmware_Init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAnalogIn
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPHwReset
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCs8416Unlock
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Seek_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadEq
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTS_Cfg_Change_Deal
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[161]"></a>Timer0_Handler</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = Timer0_Handler &rArr; RadioDisplay &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderSwitchThread
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_Text_Display
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupFlashHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config1
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>Timer0Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systeminit
</UL>

<P><STRONG><a name="[42]"></a>timer0_irq</STRONG> (ARM, 812 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = timer0_irq &rArr; RefreshHandle &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshHandle (via Veneer)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetSoftMute (via Veneer)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPHDMISetting (via Veneer)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTimerHandler (via Veneer)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[32e]"></a>VfdSendNByte</STRONG> (Thumb, 56 bytes, Stack size 88 bytes, vfddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteNByte
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
</UL>

<P><STRONG><a name="[32f]"></a>VfdSendByte</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, vfddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = VfdSendByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteNByte
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetDimerValue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateBuffer
</UL>

<P><STRONG><a name="[235]"></a>VfdUpdateBuffer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, vfddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendByte
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdRefresh
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
</UL>

<P><STRONG><a name="[159]"></a>VfdSetDimerValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vfddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = VfdSetDimerValue &rArr; VfdSendByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcDimerOff
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[331]"></a>Mas9116Read</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, mas9116.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensePort0
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>

<P><STRONG><a name="[332]"></a>CalcMas9116Volume</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mas9116.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalcMas9116Volume &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
</UL>

<P><STRONG><a name="[333]"></a>Mas9116SetGain</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mas9116.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mas9116SetGain &rArr; CalcMas9116Volume &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMas9116Volume
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116WriteWord
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMas9116
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Volume
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundSetVolume
</UL>

<P><STRONG><a name="[336]"></a>Mas9116ReadRC5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mas9116.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
</UL>

<P><STRONG><a name="[334]"></a>Mas9116Reset</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, mas9116.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mas9116Reset &rArr; Mas9116WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116WriteWord
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs5
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs4
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs3
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs2
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs1
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMas9116Cs0
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolumeInit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
</UL>

<P><STRONG><a name="[206]"></a>SetZone2Volume</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SetZone2Volume &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2VolumeSetup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeLevel
</UL>

<P><STRONG><a name="[1da]"></a>Set2ChVolume</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Set2ChVolume &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogInLevel
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL8
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL7
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL6
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL5
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1SAL1
</UL>

<P><STRONG><a name="[1c6]"></a>SetBalanceVolume</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetBalanceVolume &rArr; Mas9116SetGain &rArr; CalcMas9116Volume &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSW
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBL
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLBR
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSL
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLSR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSLL
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceSetup
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSW
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLBR
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLSR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLC
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSLL
</UL>

<P><STRONG><a name="[20c]"></a>Set7Ch1MainVolume</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set7Ch1MainVolume &rArr; SetBalanceVolume &rArr; Mas9116SetGain &rArr; CalcMas9116Volume &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupExit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMasterVolumeLevel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxVolumeLevel
</UL>

<P><STRONG><a name="[335]"></a>AutoSoundSetVolume</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, volume.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>

<P><STRONG><a name="[200]"></a>SoftMute</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SoftMute &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SLSR_Mas9116_Mute
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SBLSBR_Mas9116_Mute
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLFR_Mas9116_Mute
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CENLFE_Mas9116_Mute
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116ReadRC5
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundInit
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcPliiKey
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcNeoKey
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_secret_loop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[254]"></a>VolumeInit</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, volume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VolumeInit &rArr; Mas9116Reset &rArr; Mas9116WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116ReadRC5
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
</UL>

<P><STRONG><a name="[337]"></a>Max335SendByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, max335.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Max335SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Clk
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Data
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
</UL>

<P><STRONG><a name="[1bf]"></a>SetMax335Switch</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, max335.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMax335Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSelectChannel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInputTypeSelect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2AnalogInOff
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInOff
</UL>

<P><STRONG><a name="[1c0]"></a>UpdateMax335</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, max335.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = UpdateMax335 &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max335SendByte
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSelectChannel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInputTypeSelect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2AnalogInOff
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInOff
</UL>

<P><STRONG><a name="[1c1]"></a>DigiSendByte</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut2
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut1
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrigerOut
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalInSelect71Channel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2DigiSelectChannel
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalInSelectChannel
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[269]"></a>SetTrigerOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetTrigerOut &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
</UL>

<P><STRONG><a name="[26a]"></a>SetTrigerOut1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetTrigerOut1 &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
</UL>

<P><STRONG><a name="[26b]"></a>SetTrigerOut2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SetTrigerOut2 &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
</UL>

<P><STRONG><a name="[338]"></a>DigitalInSelectChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DigitalInSelectChannel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[24b]"></a>DigitalInSelect71Channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[339]"></a>Zone2DigiSelectChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Zone2DigiSelectChannel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
</UL>

<P><STRONG><a name="[33a]"></a>CheckAnalogIn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckAnalogIn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseAnalogSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[33c]"></a>AnalogInOff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = AnalogInOff &rArr; UpdateMax335 &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSearchInputChannel
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelectInputChannel
</UL>

<P><STRONG><a name="[1be]"></a>Zone2AnalogInOff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Zone2AnalogInOff &rArr; UpdateMax335 &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
</UL>

<P><STRONG><a name="[2ad]"></a>AnalogInSelectChannel</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = AnalogInSelectChannel &rArr; UpdateMax335 &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[205]"></a>Zone2SelectChannel</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Zone2SelectChannel &rArr; Zone2DigiSelectChannel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2AnalogInOff
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2DigiSelectChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
</UL>

<P><STRONG><a name="[24a]"></a>AnalogInputTypeSelect</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = AnalogInputTypeSelect &rArr; UpdateMax335 &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundExit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[247]"></a>Analog7CH1OutSelectChannel</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Analog7CH1OutSelectChannel &rArr; UpdateMax335 &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[33e]"></a>SystemSelectInputChannel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, channel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInOff
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>

<P><STRONG><a name="[24c]"></a>SystemSearchInputChannel</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = SystemSearchInputChannel &rArr; CheckInputChannel &rArr; DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInOff
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
</UL>

<P><STRONG><a name="[267]"></a>CheckInput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = CheckInput &rArr; CheckInputChannel &rArr; DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInOff
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
</UL>

<P><STRONG><a name="[20a]"></a>HdmiSendByte</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HdmiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Port_Select
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone1PowerOn
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHdmiAudioOut
</UL>

<P><STRONG><a name="[1c2]"></a>HdmiReadByte</STRONG> (Thumb, 40 bytes, Stack size 72 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = HdmiReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_secret_loop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[248]"></a>HDMI_Port_Select</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HDMI_Port_Select &rArr; HdmiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource
</UL>

<P><STRONG><a name="[33f]"></a>HDMI_Loop</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HDMI_Loop &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCs8416Pcm
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCs8416Unlock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
</UL>

<P><STRONG><a name="[340]"></a>DSD_Loop</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DSD_Loop &rArr; HdmiReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurFocusTid
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
</UL>

<P><STRONG><a name="[341]"></a>HDMI_Busy</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = HDMI_Busy &rArr; DSP_API_Read &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_API_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_DSD_Loop
</UL>

<P><STRONG><a name="[343]"></a>HDMI_secret_loop</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, hdmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
</UL>

<P><STRONG><a name="[165]"></a>HDMI_DSD_Loop</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hdmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HDMI_DSD_Loop &rArr; HDMI_Loop &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDSDMode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Busy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSD_Loop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[349]"></a>Delay_SPI</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dsp_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
</UL>

<P><STRONG><a name="[347]"></a>DspSpiWriteNByte</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, dsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Clk
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Cs
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadTRUEHD
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DECODE_MODE_STEREO
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DECODE_MODE_MULTI
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Channel_Setting
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadRegist
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadCrossbar
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDolby
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_BOOST_Y
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_CUT_X
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_COMPRESSION_CONTROL
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_STEREO_MODE_CONTROL
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_Control
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDelay
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_DLYAUXCNTL
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EXT_BUFF_SIZE
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EXT_BUFF_ADDR
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Max_Setting
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Unit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_MAIN_PPM_CONTROL
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_BACK_SUM_OUTPUT_SUB_LEVEL
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_FRONT_SUM_OUTPUT_SUB_LEVEL
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_SUB_LEVEL
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_BACK
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_FRONT
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM5_INPUT_LEVLE
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM4_INPUT_LEVLE
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM3_INPUT_LEVLE
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM2_INPUT_LEVEL
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM1_INPUT_LEVEL
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_BACK_SUM_OUTPUT_LEVEL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_FRONT_SUM_OUTPUT_LEVEL
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_LFE_OUTPUT_LEVEL
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_LEVEL
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SET_BASS_CORNER
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_MGR_HPF_CONTROL
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_MGR_5XOVER_CONTROL
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_CONTROL
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_API_Read
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MCLK_FACTOR
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode_Pl2x
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_AUDIO_SRC
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_OUTPUT_FS
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Decode_Mode_Control
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Control
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadSgen
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CHANNEL_SIGNAL_SELECT
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadOS
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL_FOR_DSPB_Debug
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL_Debug
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_IRC2_Max_EQ_Fc
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IRC_1_Test_Signal
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IRC1_Tx_Channel
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Rx_Gain
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IRC_1_Control
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadEq
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_CHANGER
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_POSTGAIN
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_CH_PREATTENUATION
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Flash
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Bands
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Channels
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Config
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Control
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL_FOR_DSPB
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_IRC2_Speaker_Select
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_IRC2_Control
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_Control
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Cut_Scalefactor
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Boost_Scalefactor
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SGEN_CHANNEL_ENABLE
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Rx_Channel
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IRC1_Test_Duration
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_VIRTUALIZER
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MATRIX
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_DECODER
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_DTS_HD_HRA_Read
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDTSHDChannel
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDolbyPLIIX
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DIMENSION_CONFIGURATION
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_CENTER_WIDTH_CONFIGURATION
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_CNOTROL_REGISTER
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_Control
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DIMENSION_CONFIGURATION
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_CENTER_WIDTH_CONFIGURATION
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_CONTROL_REGISTER
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DECODE_MODE
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_Control
</UL>

<P><STRONG><a name="[348]"></a>DspSpiReadNByte</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DspSpiReadNByte &rArr; ReadByteDsp &rArr; SenseDspIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_SPI
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByteDsp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Clk
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Cs
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadEq
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDspMessage
</UL>

<P><STRONG><a name="[34a]"></a>IdmSerialWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IdmSerialWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Send
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
</UL>

<P><STRONG><a name="[34c]"></a>IdmSerialRead</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueEmpty
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
</UL>

<P><STRONG><a name="[34e]"></a>CalcCheckSum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[34d]"></a>Build_IDM_write_message</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Build_IDM_write_message &rArr; CalcCheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFMMode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftwareVersion
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysStatus
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSISstationMessage
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushSIS
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushAllPSD
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushPSD
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_basic_sis_data
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_program
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_set_FM_stereo_mode
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rbds_group
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_get_FM_status
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acq_status
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Audio_Control
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Step
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Select
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StationChangeStartFM
</UL>

<P><STRONG><a name="[34f]"></a>IDMtransfer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialRead
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFMMode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSoftwareVersion
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysStatus
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSISstationMessage
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushSIS
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushAllPSD
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushPSD
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_basic_sis_data
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_program
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_set_FM_stereo_mode
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rbds_group
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_get_FM_status
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acq_status
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Audio_Control
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Step
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Select
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StationChangeStartFM
</UL>

<P><STRONG><a name="[350]"></a>StationChangeStartFM</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[351]"></a>Tune_Select</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Tune_Select &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Write_Freq_Command
</UL>

<P><STRONG><a name="[352]"></a>Tune_Step</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Tune_Step &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Seek_Command
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Req_Tune_Up
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Req_Tune_Down
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
</UL>

<P><STRONG><a name="[2b8]"></a>Tune_GetStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Tune_GetStatus &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRadioStatus
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11_Tuner_SIS_Change
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Seek_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
</UL>

<P><STRONG><a name="[353]"></a>Sys_Audio_Control</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Sys_Audio_Control &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Volume_Init
</UL>

<P><STRONG><a name="[2bf]"></a>Tuner_Req_Tune_Up</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Tuner_Req_Tune_Up &rArr; Tune_Step &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2c1]"></a>Tuner_Req_Tune_Down</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Tuner_Req_Tune_Down &rArr; Tune_Step &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[354]"></a>Radio_IsTuned</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tuner_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Seek_Command
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
</UL>

<P><STRONG><a name="[2bd]"></a>Tuner_Seek_Command</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Tuner_Seek_Command &rArr; Tune_Step &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsTuned
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[355]"></a>get_acq_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = get_acq_status &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcqStatusSave
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
</UL>

<P><STRONG><a name="[357]"></a>idm_get_FM_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = idm_get_FM_status &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_set_FM_stereo_mode
</UL>

<P><STRONG><a name="[2c4]"></a>Radio_GetStatus</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Radio_GetStatus &rArr; RBDS_Decode &rArr; get_rbds_group &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_get_FM_status
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acq_status
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioLoop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
</UL>

<P><STRONG><a name="[359]"></a>IsSISAcquired</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tuner_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_HDSEEK_Command
</UL>

<P><STRONG><a name="[2be]"></a>Tuner_HDSEEK_Command</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Tuner_HDSEEK_Command &rArr; Radio_GetStatus &rArr; RBDS_Decode &rArr; get_rbds_group &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_GetStatus
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSISAcquired
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_IsTuned
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[367]"></a>EnableRBDS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tuner_new.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_SetEnable
</UL>

<P><STRONG><a name="[35a]"></a>get_rbds_group</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = get_rbds_group &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
</UL>

<P><STRONG><a name="[35b]"></a>idm_set_FM_stereo_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = idm_set_FM_stereo_mode &rArr; idm_get_FM_status &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_get_FM_status
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Mute_Command
</UL>

<P><STRONG><a name="[28a]"></a>Tuner_Mute_Command</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Tuner_Mute_Command &rArr; idm_set_FM_stereo_mode &rArr; idm_get_FM_status &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idm_set_FM_stereo_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[28b]"></a>Tuner_Volume_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Tuner_Volume_Init &rArr; Sys_Audio_Control &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Audio_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[289]"></a>Tuner_Write_Freq_Command</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Tuner_Write_Freq_Command &rArr; Tune_Select &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tune_Select
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTuner
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
</UL>

<P><STRONG><a name="[288]"></a>InitTuner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tuner_new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = InitTuner &rArr; Tuner_Write_Freq_Command &rArr; Tune_Select &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Write_Freq_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChangeMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[35c]"></a>select_program</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[35d]"></a>get_basic_sis_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[35e]"></a>FlushPSD</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[35f]"></a>FlushAllPSD</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[360]"></a>FlushSIS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[361]"></a>GetSISstationMessage</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[362]"></a>GetSysStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[363]"></a>ReadSoftwareVersion</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[364]"></a>ChangeFMMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tuner_new.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDMtransfer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_IDM_write_message
</UL>

<P><STRONG><a name="[485]"></a>Tuner_Req_Radio_Monitor_Command</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tuner_new.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>RBDS_Blk2_Decode</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, rbds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RBDS_Blk2_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
</UL>

<P><STRONG><a name="[365]"></a>RBDS_GetCallSign</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, rbds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>

<P><STRONG><a name="[368]"></a>RBDS_B2_0_Decode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, rbds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RBDS_B2_0_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
</UL>

<P><STRONG><a name="[36b]"></a>RBDS_B2_2_Decode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rbds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RBDS_B2_2_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
</UL>

<P><STRONG><a name="[36a]"></a>RBDS_GetPSDesc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rbds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
</UL>

<P><STRONG><a name="[36c]"></a>RBDS_GetRadioText</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, rbds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RBDS_GetRadioText
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Decode
</UL>

<P><STRONG><a name="[2ae]"></a>RBDS_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rbds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RBDS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRBDS
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[358]"></a>RBDS_Decode</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, rbds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = RBDS_Decode &rArr; get_rbds_group &rArr; IDMtransfer &rArr; IdmSerialRead &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_GetRadioText
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_GetPSDesc
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_B2_2_Decode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_B2_0_Decode
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Blk2_Decode
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rbds_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_GetStatus
</UL>

<P><STRONG><a name="[2aa]"></a>RBDS_IsValid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextDispBuffer
</UL>

<P><STRONG><a name="[36d]"></a>RBDS_SetInvalid</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rbds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>

<P><STRONG><a name="[486]"></a>RBDS_GetPSDescriptionStr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rbds.o(.text), UNUSED)

<P><STRONG><a name="[487]"></a>RBDS_GetRadioTextStr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rbds.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>RBDS_SetEnable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rbds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRBDS
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>

<P><STRONG><a name="[488]"></a>RBDS_IsEnabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rbds.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>ConvertDbValue</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_BACK_SUM_OUTPUT_SUB_LEVEL
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_FRONT_SUM_OUTPUT_SUB_LEVEL
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_SUB_LEVEL
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_BACK
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_FRONT
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM5_INPUT_LEVLE
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM4_INPUT_LEVLE
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM3_INPUT_LEVLE
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM2_INPUT_LEVEL
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM1_INPUT_LEVEL
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_BACK_SUM_OUTPUT_LEVEL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_FRONT_SUM_OUTPUT_LEVEL
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_LFE_OUTPUT_LEVEL
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_LEVEL
</UL>

<P><STRONG><a name="[371]"></a>DSP_BASS_CONTROL</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_CONTROL &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BassOn
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[372]"></a>DSP_BASS_MGR_5XOVER_CONTROL</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_MGR_5XOVER_CONTROL &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[373]"></a>DSP_BASS_MGR_HPF_CONTROL</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_MGR_HPF_CONTROL &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[374]"></a>DSP_SET_BASS_CORNER</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DSP_SET_BASS_CORNER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
</UL>

<P><STRONG><a name="[375]"></a>DSP_BASS_INPUT_LEVEL</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_INPUT_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[376]"></a>DSP_BASS_LFE_OUTPUT_LEVEL</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_LFE_OUTPUT_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[377]"></a>DSP_BASS_FRONT_SUM_OUTPUT_LEVEL</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_FRONT_SUM_OUTPUT_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[378]"></a>DSP_BASS_BACK_SUM_OUTPUT_LEVEL</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_BACK_SUM_OUTPUT_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[379]"></a>DSP_BASS_SUM1_INPUT_LEVEL</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_SUM1_INPUT_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[37a]"></a>DSP_BASS_SUM2_INPUT_LEVEL</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_SUM2_INPUT_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[37b]"></a>DSP_BASS_SUM3_INPUT_LEVLE</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_SUM3_INPUT_LEVLE &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[37c]"></a>DSP_BASS_SUM4_INPUT_LEVLE</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_SUM4_INPUT_LEVLE &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[37d]"></a>DSP_BASS_SUM5_INPUT_LEVLE</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_SUM5_INPUT_LEVLE &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[37e]"></a>DSP_BASS_X_INPUT_LEVEL_FRONT</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_X_INPUT_LEVEL_FRONT &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[37f]"></a>DSP_BASS_X_INPUT_LEVEL_BACK</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[380]"></a>DSP_BASS_INPUT_SUB_LEVEL</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_INPUT_SUB_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[381]"></a>DSP_BASS_FRONT_SUM_OUTPUT_SUB_LEVEL</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_FRONT_SUM_OUTPUT_SUB_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[382]"></a>DSP_BASS_BACK_SUM_OUTPUT_SUB_LEVEL</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = DSP_BASS_BACK_SUM_OUTPUT_SUB_LEVEL &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[383]"></a>ConfigSpkMode</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ConfigSpkMode &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
</UL>

<P><STRONG><a name="[384]"></a>C11SetBass</STRONG> (Thumb, 584 bytes, Stack size 24 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSpkMode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_BACK_SUM_OUTPUT_SUB_LEVEL
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_FRONT_SUM_OUTPUT_SUB_LEVEL
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_SUB_LEVEL
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_BACK
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_FRONT
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM5_INPUT_LEVLE
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM4_INPUT_LEVLE
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM3_INPUT_LEVLE
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM2_INPUT_LEVEL
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM1_INPUT_LEVEL
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_BACK_SUM_OUTPUT_LEVEL
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_FRONT_SUM_OUTPUT_LEVEL
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_LFE_OUTPUT_LEVEL
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_LEVEL
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_MGR_HPF_CONTROL
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_MGR_5XOVER_CONTROL
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
</UL>

<P><STRONG><a name="[385]"></a>BassOn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bassmanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_CONTROL
</UL>

<P><STRONG><a name="[1f8]"></a>SetBassManagerSpeaker</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, bassmanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C11SetBass
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SET_BASS_CORNER
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcSpkMode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcCorner
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrossoverPointsMode
</UL>

<P><STRONG><a name="[386]"></a>DSP_MAIN_PPM_CONTROL</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, delaymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DSP_MAIN_PPM_CONTROL &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Firmware_Init
</UL>

<P><STRONG><a name="[387]"></a>DSP_Delay_Unit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, delaymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[1f5]"></a>DSP_Delay_Channel_Setting</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, delaymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcDelay
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDistanceMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AV_Delay
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Firmware_Init
</UL>

<P><STRONG><a name="[388]"></a>DSP_Delay_Max_Setting</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, delaymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[389]"></a>DSP_EXT_BUFF_ADDR</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, delaymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[38a]"></a>DSP_EXT_BUFF_SIZE</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, delaymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[38b]"></a>DSP_DLYAUXCNTL</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, delaymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[38c]"></a>DSP_Delay_Firmware_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, delaymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DSP_Delay_Firmware_Init &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Channel_Setting
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_MAIN_PPM_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
</UL>

<P><STRONG><a name="[1d3]"></a>DSP_AV_Delay</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, delaymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DSP_AV_Delay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Channel_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvSyncDelaySetup
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAVD
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDEL
</UL>

<P><STRONG><a name="[38d]"></a>DspReadDelay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, delaymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[38f]"></a>DSP_AC3_Control</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dolbymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[390]"></a>DSP_AC3_STEREO_MODE_CONTROL</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dolbymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[391]"></a>DSP_AC3_COMPRESSION_CONTROL</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dolbymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = DSP_AC3_COMPRESSION_CONTROL &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_DRC_INIT
</UL>

<P><STRONG><a name="[392]"></a>DSP_AC3_CUT_X</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dolbymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_AC3_CUT_X &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_DRC_INIT
</UL>

<P><STRONG><a name="[393]"></a>DSP_AC3_BOOST_Y</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dolbymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_AC3_BOOST_Y &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_DRC_INIT
</UL>

<P><STRONG><a name="[394]"></a>DSP_AC3_DRC_INIT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dolbymanager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = DSP_AC3_DRC_INIT &rArr; DSP_AC3_BOOST_Y &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_BOOST_Y
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_CUT_X
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_COMPRESSION_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>

<P><STRONG><a name="[395]"></a>DspReadDolby</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dolbymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[396]"></a>DspReadCrossbar</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dolbymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[397]"></a>DspReadRegist</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dolbymanager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[398]"></a>DSP_PLII_Control</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dolbyprologicii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLII_Control &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Panorama_On_Or_Off
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_Firmware_Cfg
</UL>

<P><STRONG><a name="[399]"></a>DSP_PLII_DECODE_MODE</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, dolbyprologicii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLII_DECODE_MODE &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Width
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Panorama_On_Or_Off
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Dimension
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_Firmware_Cfg
</UL>

<P><STRONG><a name="[39a]"></a>DSP_PLII_CONTROL_REGISTER</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, dolbyprologicii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLII_CONTROL_REGISTER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Panorama_On_Or_Off
</UL>

<P><STRONG><a name="[39b]"></a>DSP_PLII_CENTER_WIDTH_CONFIGURATION</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, dolbyprologicii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLII_CENTER_WIDTH_CONFIGURATION &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Width
</UL>

<P><STRONG><a name="[39c]"></a>DSP_PLII_DIMENSION_CONFIGURATION</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, dolbyprologicii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLII_DIMENSION_CONFIGURATION &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Prologic2Dimension
</UL>

<P><STRONG><a name="[39d]"></a>DSP_PLII_Firmware_Cfg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dolbyprologicii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DECODE_MODE
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_Control
</UL>

<P><STRONG><a name="[39e]"></a>DSP_PLIIx_Control</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[274]"></a>DSP_PLIIx_DECODE_MODE_STEREO</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLIIx_DECODE_MODE_STEREO &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcSurKey
</UL>

<P><STRONG><a name="[39f]"></a>DSP_PLIIx_CNOTROL_REGISTER</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3a0]"></a>DSP_PLIIx_CENTER_WIDTH_CONFIGURATION</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3a1]"></a>DSP_PLIIx_DIMENSION_CONFIGURATION</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[279]"></a>DSP_PLIIx_DECODE_MODE_MULTI</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_PLIIx_DECODE_MODE_MULTI &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcSurKey
</UL>

<P><STRONG><a name="[3a2]"></a>DspReadDolbyPLIIX</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dolbyprologiciix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3a3]"></a>DispBuffer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dsp_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[3a4]"></a>DisplayBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dsp_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = DisplayBuffer &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[3ac]"></a>ClearDspBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dsp_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
</UL>

<P><STRONG><a name="[3a5]"></a>AnalyseDspMsg</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, dsp_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = AnalyseDspMsg &rArr; DspProcUnsolicitedMsg &rArr; ProcAutodetecResponse &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcUnsolicitedMsg
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseTureHDCfg
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHRACfg
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHDCfg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsCfg
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseAc3Cfg
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoop
</UL>

<P><STRONG><a name="[164]"></a>DspLoop</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, dsp_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = DspLoop &rArr; ProcInputSelect &rArr; SelectSource &rArr; SystemSearchInputChannel &rArr; CheckInputChannel &rArr; DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Select
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDspChannel
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseAnalogSignal
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd_dsp_channle_Select
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCs8416Pcm
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCs8416Unlock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416GetFreq
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDspBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[295]"></a>ReConvert_8_24_Value</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReConvert_8_24_Value &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue
</UL>

<P><STRONG><a name="[29e]"></a>ConvertBalanceValue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConvertBalanceValue &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[3be]"></a>ArrayToDWORD</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, dspdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDspMessage
</UL>

<P><STRONG><a name="[3cb]"></a>ArrayToHWORD</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dspdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
</UL>

<P><STRONG><a name="[1d2]"></a>Set_Prologic2Width</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Set_Prologic2Width &rArr; DSP_PLII_CENTER_WIDTH_CONFIGURATION &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_CENTER_WIDTH_CONFIGURATION
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DECODE_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkWidthSetup
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMC
</UL>

<P><STRONG><a name="[1cf]"></a>Set_Prologic2Dimension</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Set_Prologic2Dimension &rArr; DSP_PLII_DIMENSION_CONFIGURATION &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DIMENSION_CONFIGURATION
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DECODE_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkDimensionSetup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDIM
</UL>

<P><STRONG><a name="[1d1]"></a>Set_Prologic2Panorama_On_Or_Off</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Set_Prologic2Panorama_On_Or_Off &rArr; DSP_PLII_CONTROL_REGISTER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_CONTROL_REGISTER
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DECODE_MODE
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkPanoramaSetup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMP
</UL>

<P><STRONG><a name="[17c]"></a>DspProcSpkMode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = DspProcSpkMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSpkMode
</UL>

<P><STRONG><a name="[178]"></a>DspProcDelay</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DspProcDelay &rArr; DSP_Delay_Channel_Setting &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Channel_Setting
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspDelay
</UL>

<P><STRONG><a name="[17a]"></a>DspProcCorner</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = DspProcCorner &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspCorner
</UL>

<P><STRONG><a name="[17e]"></a>DspProcSignal</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DspProcSignal &rArr; DSP_SGEN_ENABLE &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SGEN_ENABLE
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SGEN_CHANNEL_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspSignal
</UL>

<P><STRONG><a name="[180]"></a>DspProcIrc</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DspProcIrc &rArr; InitMicParameter &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMute
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMicParameter
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_IRC2_Speaker_Select
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_IRC2_Control
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Rx_Channel
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IRC1_Test_Duration
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspIrc
</UL>

<P><STRONG><a name="[27f]"></a>SetDh2On</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SetDh2On &rArr; Change_DSP_VIRTUALIZER_Code &rArr; DSP_CFG_VIRTUALIZER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[3b6]"></a>DspChannelOut5_1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DspChannelOut5_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL_FOR_DSPB
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOutSetting
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
</UL>

<P><STRONG><a name="[3b9]"></a>DspChannelOut7_1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL_FOR_DSPB
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OUTPUT_MODE_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOutSetting
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTS_Cfg_Change_Deal
</UL>

<P><STRONG><a name="[281]"></a>DspChannelOutSetting</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DspChannelOutSetting &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut5_1
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[280]"></a>DspLoadDefaultSetting</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = DspLoadDefaultSetting &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBassManagerSpeaker
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_Firmware_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AV_Delay
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Firmware_Init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[3bd]"></a>CheckDspMessage</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayToDWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
</UL>

<P><STRONG><a name="[29d]"></a>DspMasterBoot</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPHwReset
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDspMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcPower
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[176]"></a>DspProcPower</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspMasterBoot
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPHwReset
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
</UL>

<P><STRONG><a name="[204]"></a>DSPFirmwareWrite</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcInputSelect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcZone2PowerOn
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2SelectChannel
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSpkMode
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Loop
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMicParameter
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SGEN_ENABLE
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerAllMono
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerAllStereo
</UL>

<P><STRONG><a name="[3c0]"></a>SetMixerAllStereo</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SetMixerAllStereo &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
</UL>

<P><STRONG><a name="[3c1]"></a>SetMixerAllMono</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SetMixerAllMono &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
</UL>

<P><STRONG><a name="[1a8]"></a>DspSetCrossbarEffect</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = DspSetCrossbarEffect &rArr; Change_DSP_VIRTUALIZER_Code &rArr; DSP_CFG_VIRTUALIZER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_MATRIX_Code
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerAllMono
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMixerAllStereo
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcSurKey
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcSurKey
</UL>

<P><STRONG><a name="[1d5]"></a>GetNormalFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dspdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcSurKey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcNeoKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcCesKey
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232UpdateStreamType
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
</UL>

<P><STRONG><a name="[1ab]"></a>DspDecodePcm</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DspDecodePcm &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_VIRTUALIZER
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MATRIX
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_MATRIX_Code
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut5_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mode_refesh
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcNeoKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcCesKey
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcm_20_config1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>

<P><STRONG><a name="[1a6]"></a>DspDecodeAc3</STRONG> (Thumb, 1068 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_DRC_INIT
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_INIT
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_VIRTUALIZER
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MATRIX
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EX
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mode_refesh
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcCesKey
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TureHD_Cfg_Change_Deal
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC3_Cfg_Change_Deal
</UL>

<P><STRONG><a name="[3c6]"></a>AC3_Cfg_Change_Deal</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = AC3_Cfg_Change_Deal &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseAc3Cfg
</UL>

<P><STRONG><a name="[3a7]"></a>AnalyseAc3Cfg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = AnalyseAc3Cfg &rArr; AC3_Cfg_Change_Deal &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC3_Cfg_Change_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[3c7]"></a>TureHD_Cfg_Change_Deal</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = TureHD_Cfg_Change_Deal &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseTureHDCfg
</UL>

<P><STRONG><a name="[3a9]"></a>AnalyseTureHDCfg</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = AnalyseTureHDCfg &rArr; TureHD_Cfg_Change_Deal &rArr; DspDecodeAc3 &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TureHD_Cfg_Change_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[1a4]"></a>DspDecodeDTS</STRONG> (Thumb, 1106 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_VIRTUALIZER
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MATRIX
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_DECODER
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_MATRIX_Code
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1ED
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_mode_refesh
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcPliiKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcCesKey
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsHD_Cfg_Change_Deal
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTS_Cfg_Change_Deal
</UL>

<P><STRONG><a name="[3c9]"></a>DTS_Cfg_Change_Deal</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DTS_Cfg_Change_Deal &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsCfg
</UL>

<P><STRONG><a name="[3a8]"></a>AnalyseDtsCfg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = AnalyseDtsCfg &rArr; DTS_Cfg_Change_Deal &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTS_Cfg_Change_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[3ca]"></a>DtsHD_Cfg_Change_Deal</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DtsHD_Cfg_Change_Deal &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDtsHDCfg
</UL>

<P><STRONG><a name="[38e]"></a>ReadDsp</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ReadDsp &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArrayToHWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc2
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadTRUEHD
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadRegist
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadCrossbar
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDolby
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDelay
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_API_Read
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadSgen
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadOS
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_DTS_HD_HRA_Read
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDTSHDChannel
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadDolbyPLIIX
</UL>

<P><STRONG><a name="[3cc]"></a>DspReadDTSHDChannel</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dspdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3aa]"></a>AnalyseDtsHDCfg</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = AnalyseDtsHDCfg &rArr; DtsHD_Cfg_Change_Deal &rArr; DspDecodeDTS &rArr; DspChannelOut7_1 &rArr; OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsHD_Cfg_Change_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[3ab]"></a>AnalyseDtsHRACfg</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = AnalyseDtsHRACfg &rArr; MsgSetStream &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[3cd]"></a>DSP_DTS_HD_HRA_Read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dspdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[32b]"></a>lpcm_20_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = lpcm_20_config &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[32c]"></a>lpcm_20_config1</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lpcm_20_config1 &rArr; Cs8416GetFreq &rArr; Cs8416ReadByte &rArr; I2C_byteread &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[3ce]"></a>ProcAutodetecResponse</STRONG> (Thumb, 1756 bytes, Stack size 24 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = ProcAutodetecResponse &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDspPower
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Input_Stream_Select
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDSPSetting
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetStream
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftMute
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416GetFreq
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcUnsolicitedMsg
</UL>

<P><STRONG><a name="[3a6]"></a>DspProcUnsolicitedMsg</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DspProcUnsolicitedMsg &rArr; ProcAutodetecResponse &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg
</UL>

<P><STRONG><a name="[1a3]"></a>SetLate</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, dspdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = SetLate &rArr; DSP_AC3_BOOST_Y &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_BOOST_Y
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_CUT_X
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_AC3_COMPRESSION_CONTROL
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_Control
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Cut_Scalefactor
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Boost_Scalefactor
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1C
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LateSetup
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASDD
</UL>

<P><STRONG><a name="[3d2]"></a>CALC_EQ_FC</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CALC_EQ_FC &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
</UL>

<P><STRONG><a name="[3d3]"></a>CALC_EQ_Q</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CALC_EQ_Q &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
</UL>

<P><STRONG><a name="[3d4]"></a>CALC_EQ_G</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CALC_EQ_G &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
</UL>

<P><STRONG><a name="[3d5]"></a>DSP_Eq_Control</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DSP_Eq_Control &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_Firmware_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqOn
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
</UL>

<P><STRONG><a name="[3d6]"></a>DSP_Eq_Config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3d7]"></a>DSP_Eq_Channels</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3d8]"></a>DSP_Eq_Bands</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3d9]"></a>DSP_Eq_Flash</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3da]"></a>DSP_EQ_CH_PREATTENUATION</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3db]"></a>DSP_EQ_POSTGAIN</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3dc]"></a>DSP_EQ_CHANGER</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_EQ_CHANGER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
</UL>

<P><STRONG><a name="[1b0]"></a>EqModuleconfig</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = EqModuleconfig &rArr; DSP_Eq_Control &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_CHANGER
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Control
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_G
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_Q
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_FC
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetEq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkEqSetup
</UL>

<P><STRONG><a name="[3dd]"></a>DSP_Power_on_config</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DSP_Power_on_config &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNormalFreq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_CHANGER
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_G
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_Q
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_FC
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_Firmware_Init
</UL>

<P><STRONG><a name="[1fd]"></a>DSP_EQ_Firmware_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DSP_EQ_Firmware_Init &rArr; DSP_Power_on_config &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqOn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
</UL>

<P><STRONG><a name="[1b9]"></a>EqOn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eq_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = EqOn &rArr; DSP_EQ_Firmware_Init &rArr; DSP_Power_on_config &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_Firmware_Init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Eq_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EQ
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey
</UL>

<P><STRONG><a name="[3de]"></a>DspReadEq</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, eq_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
</UL>

<P><STRONG><a name="[3df]"></a>Convert_8_24_Value</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, irc1_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Convert_8_24_Value &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMicParameter
</UL>

<P><STRONG><a name="[3b3]"></a>InitMicParameter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, irc1_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = InitMicParameter &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_8_24_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
</UL>

<P><STRONG><a name="[3e0]"></a>DSP_IRC_1_Control</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, irc1_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3b2]"></a>DSP_Rx_Channel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, irc1_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_Rx_Channel &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
</UL>

<P><STRONG><a name="[3e1]"></a>DSP_Rx_Gain</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, irc1_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3e2]"></a>DSP_IRC1_Tx_Channel</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, irc1_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3b1]"></a>DSP_IRC1_Test_Duration</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, irc1_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_IRC1_Test_Duration &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
</UL>

<P><STRONG><a name="[3e3]"></a>DSP_IRC_1_Test_Signal</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, irc1_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[294]"></a>DspReadIrc1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, irc1_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DspReadIrc1 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpkDistance
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrc1ValidResult
</UL>

<P><STRONG><a name="[29b]"></a>GetSpkDistance</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, irc1_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = GetSpkDistance &rArr; DspReadIrc1 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[3e4]"></a>IsIrc1ValidResult</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, irc1_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc1
</UL>

<P><STRONG><a name="[3b5]"></a>Dsp_IRC2_Control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, irc2_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Dsp_IRC2_Control &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
</UL>

<P><STRONG><a name="[3b4]"></a>Dsp_IRC2_Speaker_Select</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, irc2_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Dsp_IRC2_Speaker_Select &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
</UL>

<P><STRONG><a name="[3e5]"></a>Dsp_IRC2_Max_EQ_Fc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, irc2_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[29a]"></a>DspReadIrc2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, irc2_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DspReadIrc2 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrc2ValidResult
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[299]"></a>IsIrc2ValidResult</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irc2_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = IsIrc2ValidResult &rArr; DspReadIrc2 &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspReadIrc2
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
</UL>

<P><STRONG><a name="[3b7]"></a>OS_OUTPUT_MODE_CONTROL</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, os_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = OS_OUTPUT_MODE_CONTROL &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut5_1
</UL>

<P><STRONG><a name="[3b8]"></a>OS_OUTPUT_MODE_CONTROL_FOR_DSPB</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, os_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = OS_OUTPUT_MODE_CONTROL_FOR_DSPB &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut7_1
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspChannelOut5_1
</UL>

<P><STRONG><a name="[3e6]"></a>OS_OUTPUT_MODE_CONTROL_Debug</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3e7]"></a>OS_OUTPUT_MODE_CONTROL_FOR_DSPB_Debug</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, os_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3e8]"></a>DspReadOS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_manager.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3af]"></a>DSP_SGEN_ENABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, signalgenerator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DSP_SGEN_ENABLE &rArr; DSPFirmwareWrite &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcSignal
</UL>

<P><STRONG><a name="[3ae]"></a>DSP_SGEN_CHANNEL_ENABLE</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, signalgenerator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_SGEN_CHANNEL_ENABLE &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcSignal
</UL>

<P><STRONG><a name="[3e9]"></a>DSP_CHANNEL_SIGNAL_SELECT</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, signalgenerator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3ea]"></a>DspReadSgen</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, signalgenerator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3eb]"></a>DSP_TRUEHD_Control</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dolbytruehd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3ec]"></a>DSP_TRUEHD_Decode_Mode_Control</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, dolbytruehd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3cf]"></a>DSP_TRUEHD_DRC_Control</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dolbytruehd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = DSP_TRUEHD_DRC_Control &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_INIT
</UL>

<P><STRONG><a name="[3d0]"></a>DSP_TRUEHD_Cut_Scalefactor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dolbytruehd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_TRUEHD_Cut_Scalefactor &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_INIT
</UL>

<P><STRONG><a name="[3d1]"></a>DSP_TRUEHD_Boost_Scalefactor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dolbytruehd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_TRUEHD_Boost_Scalefactor &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_INIT
</UL>

<P><STRONG><a name="[3c5]"></a>DSP_TRUEHD_DRC_INIT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dolbytruehd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = DSP_TRUEHD_DRC_INIT &rArr; DSP_TRUEHD_Cut_Scalefactor &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_DRC_Control
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Cut_Scalefactor
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Boost_Scalefactor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
</UL>

<P><STRONG><a name="[276]"></a>DspReadTRUEHD</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dolbytruehd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DspReadTRUEHD &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
</UL>

<P><STRONG><a name="[3ba]"></a>DSP_BOOT</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = DSP_BOOT &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Update_Flash
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_PPM_Code
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_MATRIX_Code
</UL>

<P><STRONG><a name="[3ed]"></a>DSP_CFG_OUTPUT_FS</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dsp_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3ee]"></a>DSP_CFG_AUDIO_SRC</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DSP_CFG_AUDIO_SRC &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Update_Flash
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>

<P><STRONG><a name="[3c8]"></a>DSP_CFG_DECODER</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DSP_CFG_DECODER &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>

<P><STRONG><a name="[3c3]"></a>DSP_CFG_MATRIX</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DSP_CFG_MATRIX &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_MATRIX_Code
</UL>

<P><STRONG><a name="[3c4]"></a>DSP_CFG_VIRTUALIZER</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_CFG_VIRTUALIZER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>

<P><STRONG><a name="[3bb]"></a>DSP_CFG_PPM</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DSP_CFG_PPM &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_PPM_Code
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>

<P><STRONG><a name="[3bc]"></a>DSP_CFG_PPM_Mode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DSP_CFG_PPM_Mode &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_PPM_Code
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
</UL>

<P><STRONG><a name="[3ef]"></a>DSP_CFG_PPM_Mode_Pl2x</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dsp_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[3f0]"></a>DSP_CFG_MCLK_FACTOR</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DSP_CFG_MCLK_FACTOR &rArr;  DspSpiWriteNByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Update_Flash
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_VIRTUALIZER_Code
</UL>

<P><STRONG><a name="[201]"></a>Change_DSP_Decoder_Code</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Change_DSP_Decoder_Code &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MCLK_FACTOR
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_AUDIO_SRC
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_DECODER
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpkBlanceTestMode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupMenuProcBalance
</UL>

<P><STRONG><a name="[3c2]"></a>Change_DSP_MATRIX_Code</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Change_DSP_MATRIX_Code &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MATRIX
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
</UL>

<P><STRONG><a name="[3b0]"></a>Change_DSP_VIRTUALIZER_Code</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Change_DSP_VIRTUALIZER_Code &rArr; DSP_CFG_VIRTUALIZER &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MCLK_FACTOR
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_AUDIO_SRC
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_VIRTUALIZER
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_DECODER
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcIrc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDh2On
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspLoadDefaultSetting
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSetCrossbarEffect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS
</UL>

<P><STRONG><a name="[3f1]"></a>Change_DSP_PPM_Code</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dsp_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
</UL>

<P><STRONG><a name="[3bf]"></a>Change_Input_Audio_Source</STRONG> (Thumb, 788 bytes, Stack size 8 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Change_Input_Audio_Source &rArr;  DSP_CFG_VIRTUALIZER (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MCLK_FACTOR
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_AUDIO_SRC
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_VIRTUALIZER
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM_Mode
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_PPM
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MATRIX
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_DECODER
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcPower
</UL>

<P><STRONG><a name="[3f2]"></a>DSP_Update_Flash</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dsp_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_MCLK_FACTOR
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_AUDIO_SRC
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT
</UL>

<P><STRONG><a name="[342]"></a>DSP_API_Read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dsp_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DSP_API_Read &rArr; DspSpiWriteNByte &rArr; SetDspPower &rArr; DspProcPower &rArr; DspMasterBoot &rArr; CheckDspMessage &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDsp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Busy
</UL>

<P><STRONG><a name="[169]"></a>__c89vsprintf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdShowMenuOption
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
</UL>

<P><STRONG><a name="[2a1]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
</UL>

<P><STRONG><a name="[3f4]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[3f5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[12c]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[3fa]"></a>__printf</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[16a]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_printf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTextDispBuffer
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Phase_Display
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetCrossoverPoints
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdShowMenuOption
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdRSN (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogoSetup (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNameSetup (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRadioStatus (via Veneer)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rbds_group (via Veneer)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalyseDspMsg (via Veneer)
</UL>

<P><STRONG><a name="[3fd]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[489]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Phase_Display (via Veneer)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiSendByte (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadByte (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendByte (via Veneer)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSendNByte (via Veneer)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416ReadByte (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cs8416WriteByte (via Veneer)
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[48a]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRemoteRepeatKey (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank (via Veneer)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank (via Veneer)
</UL>

<P><STRONG><a name="[366]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_Init (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_SetEnable (via Veneer)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_SetInvalid (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[3ff]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3fe]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[237]"></a>strncpy</STRONG> (ARM, 108 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp (via Veneer)
</UL>

<P><STRONG><a name="[48d]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage (via Veneer)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMsgQueueFull (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueueElement (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InQueue (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueFull (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueueEmpty (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay (via Veneer)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConvert_8_24_Value (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcAutoSeek (via Veneer)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey (via Veneer)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[48e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[403]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow (via Veneer)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
</UL>

<P><STRONG><a name="[3f6]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3f7]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[404]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3f9]"></a>_printf_int_common</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[122]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[491]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[3f3]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[40e]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[134]"></a>_printf_longlong_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[410]"></a>_printf_longlong_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[130]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[411]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[132]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[492]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3f8]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[144]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via Veneer)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[402]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[495]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[40d]"></a>_printf_fp_infnan</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[412]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[13c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[13e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[414]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[140]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[142]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[406]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[40f]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[497]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[498]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[416]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
</UL>

<P><STRONG><a name="[14d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42b]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[151]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[499]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[1e2]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSaveVfd (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDisplay (via Veneer)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner_Write_Freq_Command (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFmPreset (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTT_ (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBDS_GetCallSign (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUart1Baudrate (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUart0Baudrate (via Veneer)
</UL>

<P><STRONG><a name="[407]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[420]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[41f]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[421]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[422]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[408]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[409]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[423]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[160]"></a>__ARM_common_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.__ARM_common_call_via_r0))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readbyte
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
</UL>

<P><STRONG><a name="[234]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMessage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundProcMessage
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readbyte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1f2]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rs232_protocol.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcRs232Msg
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[212]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setup_menu.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inquire_restrict_option
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_default_option
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_curr_option
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_curr_option
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_curr_option
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[199]"></a>__ARM_common_switch8</STRONG> (ARM, 32 bytes, Stack size 0 bytes, rs232_protocol.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdRSN (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2S (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZone2Channel (via Veneer)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsProtocolEqBandValid (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1DF_ (via Veneer)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1E (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EF (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1S (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZone1Channel (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPcmDecodeMode (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2InputSetup (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSetup (via Veneer)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcDelay (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspProcCorner (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcDigitKey (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcessKey (via Veneer)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Port_Select (via Veneer)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DECODE_MODE_STEREO (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHidenKey (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect (via Veneer)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdUpdateStreamType (via Veneer)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcessKey (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwdKeyService (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadEeprom (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupload_memroy1 (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupRightKey (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSetupLeftKey (via Veneer)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow (via Veneer)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuLoadCurOption (via Veneer)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacInvert (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Channel_Setting (via Veneer)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_DSP_Decoder_Code (via Veneer)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChanegName (via Veneer)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkDistance (via Veneer)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_Relay (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCrossoverPointsMode (via Veneer)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDistanceMode (via Veneer)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpkPhase (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodePcm (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeDTS (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDecodeAc3 (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232UpdateStreamType (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDEL (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMC (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1EMDIM (via Veneer)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Delay_Max_Setting (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSpkMode (via Veneer)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_BACK (via Veneer)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_X_INPUT_LEVEL_FRONT (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_SUM5_INPUT_LEVLE (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_LFE_OUTPUT_LEVEL (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BASS_INPUT_LEVEL (via Veneer)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SET_BASS_CORNER (via Veneer)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdmSerialRead (via Veneer)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectMax335 (via Veneer)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectDSD (via Veneer)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_AUDIO_SRC (via Veneer)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CFG_OUTPUT_FS (via Veneer)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TRUEHD_Decode_Mode_Control (via Veneer)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_CHANNEL_SIGNAL_SELECT (via Veneer)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_POSTGAIN (via Veneer)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_EQ_CH_PREATTENUATION (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_SGEN_CHANNEL_ENABLE (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_BOOT (via Veneer)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Input_Audio_Source (via Veneer)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutodetecResponse (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_DIMENSION_CONFIGURATION (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLIIx_CENTER_WIDTH_CONFIGURATION (via Veneer)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DIMENSION_CONFIGURATION (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_CENTER_WIDTH_CONFIGURATION (via Veneer)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_PLII_DECODE_MODE (via Veneer)
</UL>

<P><STRONG><a name="[40c]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[424]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[426]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3fb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[370]"></a>pow</STRONG> (ARM, 3844 bytes, Stack size 576 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue (via Veneer)
</UL>

<P><STRONG><a name="[428]"></a>sqrt</STRONG> (ARM, 116 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[147]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via Veneer)
</UL>

<P><STRONG><a name="[45]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[296]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue (via Veneer)
</UL>

<P><STRONG><a name="[42c]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[425]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[42f]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[432]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[438]"></a>__fpl_dcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance (via Veneer)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[434]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2a0]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[49d]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[436]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[329]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir2_core_philips (via Veneer)
</UL>

<P><STRONG><a name="[435]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMAXVolumeValid (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVolumeValid (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir2_core_philips (via Veneer)
</UL>

<P><STRONG><a name="[437]"></a>_dcmple</STRONG> (ARM, 148 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[43b]"></a>__fpl_dcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[29c]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[439]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[42e]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[431]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMAXVolumeValid (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVolumeValid (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_core_philips (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir2_core_philips (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[43a]"></a>_drcmple</STRONG> (ARM, 140 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[43c]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[42a]"></a>_dsqrt</STRONG> (ARM, 516 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[429]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[43e]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBalanceValid (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetDistance (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue (via Veneer)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow (via Veneer)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZone2Volume (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2ChVolume (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig (via Veneer)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMAXVolumeValid (via Veneer)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsVolumeValid (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnalogLevelValid (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VS_ (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VBR_ (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VBL_ (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VSR_ (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VSL_ (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VC_ (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VFR_ (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VFL_ (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue (via Veneer)
</UL>

<P><STRONG><a name="[43f]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue (via Veneer)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalanceVolume (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterVolumePoint (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMas9116Volume (via Veneer)
</UL>

<P><STRONG><a name="[441]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[445]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetRoomEQ (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue (via Veneer)
</UL>

<P><STRONG><a name="[443]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_cfcmpeq</STRONG> (ARM, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
</UL>

<P><STRONG><a name="[444]"></a>_fcmpeq</STRONG> (ARM, 132 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ2V (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdZ1VM (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
</UL>

<P><STRONG><a name="[446]"></a>_ffix</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPs (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBL (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPBR (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSL (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPSR (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPR (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPC (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSPL (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint (via Veneer)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMasterVolumePoint (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASMVO (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdASAVD (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF (via Veneer)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDS (via Veneer)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAS (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDP (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFP (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDP (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAP (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDT (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAT (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPs (via Veneer)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBL (via Veneer)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPBR (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSL (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPSR (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPR (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPC (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSPL (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrossoverValid (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMas9116Volume (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_8_24_Value (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_G (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_Q (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_FC (via Veneer)
</UL>

<P><STRONG><a name="[447]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue (via Veneer)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2VolumeSetup (via Veneer)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConvert_8_24_Value (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue (via Veneer)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSelect (via Veneer)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSource (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set7Ch1MainVolume (via Veneer)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogInLevel (via Veneer)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZ2MasterVolumeLevel (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition (via Veneer)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqModuleconfig (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundSetVolume (via Veneer)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Power_on_config (via Veneer)
</UL>

<P><STRONG><a name="[49e]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[449]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint (via Veneer)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemShow (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZX (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSL (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBL (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSBR (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXSR (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFR (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFC (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdMSZXFL (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZX (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBL (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSBR (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSL (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXSR (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFR (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFC (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdSZXFL (via Veneer)
</UL>

<P><STRONG><a name="[448]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIrc2EqValue (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
</UL>

<P><STRONG><a name="[44a]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[44d]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProtocolFloatValue (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertBalanceValue (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindBalancePosition (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAHDF (via Veneer)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTAF (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFHDT (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcCmdTFT (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDbValue (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMas9116Volume (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_8_24_Value (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_G (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_Q (via Veneer)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_FC (via Veneer)
</UL>

<P><STRONG><a name="[44b]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[440]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[42d]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDistanceValid (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSpeakerCheck (via Veneer)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLevelPosition (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMas9116Volume (via Veneer)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALC_EQ_G (via Veneer)
</UL>

<P><STRONG><a name="[44c]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetBalance (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossoverPoint (via Veneer)
</UL>

<P><STRONG><a name="[44e]"></a>_fsub</STRONG> (ARM, 304 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[126]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[433]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[427]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[450]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[35]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>panel_convert_key_value</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, key_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[183]"></a>read_key</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = read_key &rArr; HeadphoneDetect &rArr; MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read165
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeadphoneDetect
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panel_convert_key_value
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelKeyThread
</UL>

<P><STRONG><a name="[189]"></a>proc_key_press</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = proc_key_press &rArr; MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelKeyThread
</UL>

<P><STRONG><a name="[18a]"></a>proc_key_hold</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = proc_key_hold &rArr; MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPanelKeyThread
</UL>

<P><STRONG><a name="[18b]"></a>GetPanelKeyThread</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, key_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GetPanelKeyThread &rArr; read_key &rArr; HeadphoneDetect &rArr; MsgSetKey &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_key_hold
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_key_press
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
</UL>

<P><STRONG><a name="[191]"></a>IsMsgQueueEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, message.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[18d]"></a>IsMsgQueueFull</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsMsgQueueFull &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>

<P><STRONG><a name="[27c]"></a>Zone1ProcessKey</STRONG> (Thumb, 1720 bytes, Stack size 8 bytes, zone1_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = Zone1ProcessKey &rArr; ChangeListenProfileMode &rArr; SetCrossoverPointsMode &rArr; SetBassManagerSpeaker &rArr; C11SetBass &rArr; DSP_BASS_X_INPUT_LEVEL_BACK &rArr; ConvertDbValue &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDh2On
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDMI_Software_Update
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSoundInit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHidenKey
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcSurKey
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcPliiKey
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcPliiKey
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcSurKey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcPliiKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcNeoKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DtsProcCesKey
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ac3ProcCesKey
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmProcCesKey
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcAutoSeekSur
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAutoseekFlag
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1Mute
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcInputSelect
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVfdOwner
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplayBlank
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdDisplay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDispBlank
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdTempDisp
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupLoadDefault
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioExit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetDimer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqOn
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteByte
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeListenProfileMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone1ProcMessage
</UL>

<P><STRONG><a name="[28c]"></a>Zone2ProcessKey</STRONG> (Thumb, 866 bytes, Stack size 16 bytes, zone2_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Zone2ProcessKey &rArr; Zone2RadioMode &rArr; VfdTempDisp &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRadioPosition
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPFirmwareWrite
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2RadioMode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2AnalogInOff
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMax335
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax335Switch
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVolume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetRadioLoadPreset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetPower
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetMute
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetInputSource
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurFocusTid
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HdmiReadByte
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSrcName
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigiSendByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zone2ProcMessage
</UL>

<P><STRONG><a name="[2a3]"></a>GetCrossoverPoint</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, auto_sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCrossoverPoint &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProcSetSpeakerphase
</UL>

<P><STRONG><a name="[2c3]"></a>get_freq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, radio_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProcMessage
</UL>

<P><STRONG><a name="[2b0]"></a>PreProcDigitKey</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PreProcDigitKey
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
</UL>

<P><STRONG><a name="[2b1]"></a>SaveExit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SaveExit &rArr; MsgSetVfdShow &rArr; SendMessage &rArr; assert_Function &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSetVfdShow
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreProcSaveKey
</UL>

<P><STRONG><a name="[2b4]"></a>SaveInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, radio_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = SaveInit &rArr; UpdateSaveVfd &rArr; VfdDisplay &rArr; VfdUpdateBuffer &rArr; VfdSendNByte &rArr; I2CWriteNByte &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSaveVfd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioKeyService
</UL>

<P><STRONG><a name="[2de]"></a>i2c_ack</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadNByte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writebyte
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
</UL>

<P><STRONG><a name="[2df]"></a>i2c_start</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_start
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadNByte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteNByte
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
</UL>

<P><STRONG><a name="[2e0]"></a>i2c_stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadNByte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteNByte
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
</UL>

<P><STRONG><a name="[2e1]"></a>i2c_writebyte</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadNByte
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteNByte
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_bytewrite
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
</UL>

<P><STRONG><a name="[2e2]"></a>i2c_readbyte</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, i2cdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r0
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadNByte
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_byteread
</UL>

<P><STRONG><a name="[2e6]"></a>Iec4094Sendbyte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ic4094.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Iec4094Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetData4094
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4094Clk
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext4094Sendbyte
</UL>

<P><STRONG><a name="[330]"></a>Mas9116WriteWord</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mas9116.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mas9116WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport0
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_timer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIoport1
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116Reset
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mas9116SetGain
</UL>

<P><STRONG><a name="[33d]"></a>CheckInputChannel</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CheckInputChannel &rArr; DigitalInSelect71Channel &rArr; DigiSendByte &rArr; I2C_bytewrite &rArr; i2c_writebyte &rArr; debug_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInSelectChannel
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalInSelect71Channel
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogInputTypeSelect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog7CH1OutSelectChannel
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAnalogIn
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalInSelectChannel
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCs8416Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSearchInputChannel
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInput
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelectInputChannel
</UL>

<P><STRONG><a name="[344]"></a>Write_Byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_MOSI
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Clk
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiWriteNByte
</UL>

<P><STRONG><a name="[345]"></a>ReadByteDsp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadByteDsp &rArr; SenseDspIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sense_Spi_MISO
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Spi_Clk
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SenseDspIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspSpiReadNByte
</UL>

<P><STRONG><a name="[41d]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[41c]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[41b]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[41e]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[43d]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[430]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[44f]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[442]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[405]"></a>_fp_digits</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[44]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[419]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12a]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[413]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[415]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
